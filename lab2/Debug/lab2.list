
lab2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d48  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  08003ef8  08003ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004158  08004158  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004158  08004158  00014158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004160  08004160  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000300  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000380  20000380  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a598  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec0  00000000  00000000  0002a648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007e8  00000000  00000000  0002c508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000710  00000000  00000000  0002ccf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ec4  00000000  00000000  0002d400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b398  00000000  00000000  000502c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfae1  00000000  00000000  0005b65c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012b13d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002290  00000000  00000000  0012b190  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003ee0 	.word	0x08003ee0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08003ee0 	.word	0x08003ee0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <BUTTON_Init>:

static bool last_state = false;
static bool was_pressed = false;
static uint32_t last_tick = 0;

void BUTTON_Init(void) {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	603b      	str	r3, [r7, #0]
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <BUTTON_Init+0x50>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <BUTTON_Init+0x50>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <BUTTON_Init+0x50>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = BUTTON_GPIO_PIN;
 80005d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005d8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;  // подтяжка вверх
 80005de:	2301      	movs	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	4619      	mov	r1, r3
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <BUTTON_Init+0x54>)
 80005e8:	f001 f9d8 	bl	800199c <HAL_GPIO_Init>
}
 80005ec:	bf00      	nop
 80005ee:	3718      	adds	r7, #24
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40020800 	.word	0x40020800

080005fc <BUTTON_Process>:

void BUTTON_Process(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
    bool pressed = (HAL_GPIO_ReadPin(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == GPIO_PIN_RESET);
 8000602:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000606:	4815      	ldr	r0, [pc, #84]	; (800065c <BUTTON_Process+0x60>)
 8000608:	f001 fb74 	bl	8001cf4 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	bf0c      	ite	eq
 8000612:	2301      	moveq	r3, #1
 8000614:	2300      	movne	r3, #0
 8000616:	71fb      	strb	r3, [r7, #7]

    uint32_t tick = HAL_GetTick();
 8000618:	f001 f810 	bl	800163c <HAL_GetTick>
 800061c:	6038      	str	r0, [r7, #0]
    if (pressed != last_state) {
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <BUTTON_Process+0x64>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	79fa      	ldrb	r2, [r7, #7]
 8000624:	429a      	cmp	r2, r3
 8000626:	d012      	beq.n	800064e <BUTTON_Process+0x52>
        // Если прошло достаточно времени с последнего изменения
        if ((tick - last_tick) >= DEBOUNCE_DELAY_MS) {
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <BUTTON_Process+0x68>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	683a      	ldr	r2, [r7, #0]
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	2b31      	cmp	r3, #49	; 0x31
 8000632:	d90f      	bls.n	8000654 <BUTTON_Process+0x58>
            last_state = pressed;
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <BUTTON_Process+0x64>)
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	7013      	strb	r3, [r2, #0]
            last_tick = tick;
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <BUTTON_Process+0x68>)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	6013      	str	r3, [r2, #0]
            if (pressed) {
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d006      	beq.n	8000654 <BUTTON_Process+0x58>
                was_pressed = true;
 8000646:	4b08      	ldr	r3, [pc, #32]	; (8000668 <BUTTON_Process+0x6c>)
 8000648:	2201      	movs	r2, #1
 800064a:	701a      	strb	r2, [r3, #0]
            }
        }
    } else {
        last_tick = tick; // сброс таймера, если состояние стабильно
    }
}
 800064c:	e002      	b.n	8000654 <BUTTON_Process+0x58>
        last_tick = tick; // сброс таймера, если состояние стабильно
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <BUTTON_Process+0x68>)
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	6013      	str	r3, [r2, #0]
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020800 	.word	0x40020800
 8000660:	2000009c 	.word	0x2000009c
 8000664:	200000a0 	.word	0x200000a0
 8000668:	2000009d 	.word	0x2000009d

0800066c <BUTTON_WasPressed>:

bool BUTTON_WasPressed(void) {
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
    if (was_pressed) {
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <BUTTON_WasPressed+0x24>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d004      	beq.n	8000682 <BUTTON_WasPressed+0x16>
        was_pressed = false;
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <BUTTON_WasPressed+0x24>)
 800067a:	2200      	movs	r2, #0
 800067c:	701a      	strb	r2, [r3, #0]
        return true;
 800067e:	2301      	movs	r3, #1
 8000680:	e000      	b.n	8000684 <BUTTON_WasPressed+0x18>
    }
    return false;
 8000682:	2300      	movs	r3, #0
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	2000009d 	.word	0x2000009d

08000694 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b088      	sub	sp, #32
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	4b20      	ldr	r3, [pc, #128]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a18      	ldr	r2, [pc, #96]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006d0:	f043 0308 	orr.w	r3, r3, #8
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_GPIO_Init+0x9c>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0308 	and.w	r3, r3, #8
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80006e2:	2200      	movs	r2, #0
 80006e4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80006e8:	4812      	ldr	r0, [pc, #72]	; (8000734 <MX_GPIO_Init+0xa0>)
 80006ea:	f001 fb1b 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_GPIO_Init+0xa4>)
 8000704:	f001 f94a 	bl	800199c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000708:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800070c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	4619      	mov	r1, r3
 8000720:	4804      	ldr	r0, [pc, #16]	; (8000734 <MX_GPIO_Init+0xa0>)
 8000722:	f001 f93b 	bl	800199c <HAL_GPIO_Init>

}
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40020c00 	.word	0x40020c00
 8000738:	40020800 	.word	0x40020800

0800073c <LED_Init>:
#include "stm32f4xx_hal.h"

static uint16_t cur_mask = 0;

void LED_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <LED_Init+0x68>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <LED_Init+0x68>)
 800074c:	f043 0308 	orr.w	r3, r3, #8
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <LED_Init+0x68>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = LED_GREEN_PIN | LED_RED_PIN | LED_YELLOW_PIN;
 800076c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000770:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4809      	ldr	r0, [pc, #36]	; (80007a8 <LED_Init+0x6c>)
 8000784:	f001 f90a 	bl	800199c <HAL_GPIO_Init>

    // start with all off
    HAL_GPIO_WritePin(LED_PORT, LED_GREEN_PIN|LED_RED_PIN|LED_YELLOW_PIN, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800078e:	4806      	ldr	r0, [pc, #24]	; (80007a8 <LED_Init+0x6c>)
 8000790:	f001 fac8 	bl	8001d24 <HAL_GPIO_WritePin>
    cur_mask = 0;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LED_Init+0x70>)
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	200000a4 	.word	0x200000a4

080007b0 <LED_SetMask>:

void LED_SetMask(uint16_t mask)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	80fb      	strh	r3, [r7, #6]
    // mask bits: 0->green,1->red,2->yellow
    HAL_GPIO_WritePin(LED_PORT, LED_GREEN_PIN, (mask & 0x1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007ba:	88fb      	ldrh	r3, [r7, #6]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	461a      	mov	r2, r3
 80007c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007ca:	4812      	ldr	r0, [pc, #72]	; (8000814 <LED_SetMask+0x64>)
 80007cc:	f001 faaa 	bl	8001d24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED_RED_PIN,   (mask & 0x2) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	105b      	asrs	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	461a      	mov	r2, r3
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	480c      	ldr	r0, [pc, #48]	; (8000814 <LED_SetMask+0x64>)
 80007e4:	f001 fa9e 	bl	8001d24 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED_YELLOW_PIN,(mask & 0x4) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	109b      	asrs	r3, r3, #2
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fa:	4806      	ldr	r0, [pc, #24]	; (8000814 <LED_SetMask+0x64>)
 80007fc:	f001 fa92 	bl	8001d24 <HAL_GPIO_WritePin>
    cur_mask = mask & 0x7;
 8000800:	88fb      	ldrh	r3, [r7, #6]
 8000802:	f003 0307 	and.w	r3, r3, #7
 8000806:	b29a      	uxth	r2, r3
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <LED_SetMask+0x68>)
 800080a:	801a      	strh	r2, [r3, #0]
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020c00 	.word	0x40020c00
 8000818:	200000a4 	.word	0x200000a4

0800081c <char_to_mask>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static uint8_t char_to_mask(char c)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
    if(c == 'g' || c == 'G') return 0x1;
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b67      	cmp	r3, #103	; 0x67
 800082a:	d002      	beq.n	8000832 <char_to_mask+0x16>
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b47      	cmp	r3, #71	; 0x47
 8000830:	d101      	bne.n	8000836 <char_to_mask+0x1a>
 8000832:	2301      	movs	r3, #1
 8000834:	e010      	b.n	8000858 <char_to_mask+0x3c>
    if(c == 'y' || c == 'Y') return 0x2;
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b79      	cmp	r3, #121	; 0x79
 800083a:	d002      	beq.n	8000842 <char_to_mask+0x26>
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b59      	cmp	r3, #89	; 0x59
 8000840:	d101      	bne.n	8000846 <char_to_mask+0x2a>
 8000842:	2302      	movs	r3, #2
 8000844:	e008      	b.n	8000858 <char_to_mask+0x3c>
    if(c == 'r' || c == 'R') return 0x4;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b72      	cmp	r3, #114	; 0x72
 800084a:	d002      	beq.n	8000852 <char_to_mask+0x36>
 800084c:	79fb      	ldrb	r3, [r7, #7]
 800084e:	2b52      	cmp	r3, #82	; 0x52
 8000850:	d101      	bne.n	8000856 <char_to_mask+0x3a>
 8000852:	2304      	movs	r3, #4
 8000854:	e000      	b.n	8000858 <char_to_mask+0x3c>
    return 0x0;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <init_presets_defaults>:

/* инициализация предустановленных 1..4 */
static void init_presets_defaults(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
    presets[1].len = 3; presets[1].seq[0]=0x1; presets[1].seq[1]=0x2; presets[1].seq[2]=0x4; presets[1].period_ms=300;
 8000868:	4b29      	ldr	r3, [pc, #164]	; (8000910 <init_presets_defaults+0xac>)
 800086a:	2203      	movs	r2, #3
 800086c:	761a      	strb	r2, [r3, #24]
 800086e:	4b28      	ldr	r3, [pc, #160]	; (8000910 <init_presets_defaults+0xac>)
 8000870:	2201      	movs	r2, #1
 8000872:	741a      	strb	r2, [r3, #16]
 8000874:	4b26      	ldr	r3, [pc, #152]	; (8000910 <init_presets_defaults+0xac>)
 8000876:	2202      	movs	r2, #2
 8000878:	745a      	strb	r2, [r3, #17]
 800087a:	4b25      	ldr	r3, [pc, #148]	; (8000910 <init_presets_defaults+0xac>)
 800087c:	2204      	movs	r2, #4
 800087e:	749a      	strb	r2, [r3, #18]
 8000880:	4b23      	ldr	r3, [pc, #140]	; (8000910 <init_presets_defaults+0xac>)
 8000882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000886:	61da      	str	r2, [r3, #28]
    presets[2].len = 2; presets[2].seq[0]=0x1; presets[2].seq[1]=0x1|0x2; presets[2].period_ms=500;
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <init_presets_defaults+0xac>)
 800088a:	2202      	movs	r2, #2
 800088c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <init_presets_defaults+0xac>)
 8000892:	2201      	movs	r2, #1
 8000894:	f883 2020 	strb.w	r2, [r3, #32]
 8000898:	4b1d      	ldr	r3, [pc, #116]	; (8000910 <init_presets_defaults+0xac>)
 800089a:	2203      	movs	r2, #3
 800089c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <init_presets_defaults+0xac>)
 80008a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008a6:	62da      	str	r2, [r3, #44]	; 0x2c
    presets[3].len = 3; presets[3].seq[0]=0x2; presets[3].seq[1]=0x4; presets[3].seq[2]=0x0; presets[3].period_ms=200;
 80008a8:	4b19      	ldr	r3, [pc, #100]	; (8000910 <init_presets_defaults+0xac>)
 80008aa:	2203      	movs	r2, #3
 80008ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <init_presets_defaults+0xac>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80008b8:	4b15      	ldr	r3, [pc, #84]	; (8000910 <init_presets_defaults+0xac>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80008c0:	4b13      	ldr	r3, [pc, #76]	; (8000910 <init_presets_defaults+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <init_presets_defaults+0xac>)
 80008ca:	22c8      	movs	r2, #200	; 0xc8
 80008cc:	63da      	str	r2, [r3, #60]	; 0x3c
    presets[4].len = 5; presets[4].seq[0]=0x1; presets[4].seq[1]=0x2; presets[4].seq[2]=0x1; presets[4].seq[3]=0x4; presets[4].seq[4]=0x0; presets[4].period_ms=150;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <init_presets_defaults+0xac>)
 80008d0:	2205      	movs	r2, #5
 80008d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <init_presets_defaults+0xac>)
 80008d8:	2201      	movs	r2, #1
 80008da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80008de:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <init_presets_defaults+0xac>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <init_presets_defaults+0xac>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <init_presets_defaults+0xac>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <init_presets_defaults+0xac>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80008fe:	4b04      	ldr	r3, [pc, #16]	; (8000910 <init_presets_defaults+0xac>)
 8000900:	2296      	movs	r2, #150	; 0x96
 8000902:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200000a8 	.word	0x200000a8

08000914 <uart_println>:

static void uart_println(const char *s) { USART_DRV_TxStr(s); USART_DRV_TxStr("\n"); }
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f000 fce7 	bl	80012f0 <USART_DRV_TxStr>
 8000922:	4803      	ldr	r0, [pc, #12]	; (8000930 <uart_println+0x1c>)
 8000924:	f000 fce4 	bl	80012f0 <USART_DRV_TxStr>
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08003ef8 	.word	0x08003ef8

08000934 <process_command>:
/* Командный буфер */
#define CMD_BUF_SZ 64

/* обработка готовой команды (строки без \r\n) */
static void process_command(const char *cmd)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
    if(strncmp(cmd, "new ", 4) == 0) {
 800093c:	2204      	movs	r2, #4
 800093e:	4953      	ldr	r1, [pc, #332]	; (8000a8c <process_command+0x158>)
 8000940:	6878      	ldr	r0, [r7, #4]
 8000942:	f002 fded 	bl	8003520 <strncmp>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d159      	bne.n	8000a00 <process_command+0xcc>
        const char *p = cmd+4;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3304      	adds	r3, #4
 8000950:	61fb      	str	r3, [r7, #28]
        char seqchars[8]; int slen = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
        while(*p && slen < 8) {
 8000956:	e031      	b.n	80009bc <process_command+0x88>
            char c = *p++;
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	1c5a      	adds	r2, r3, #1
 800095c:	61fa      	str	r2, [r7, #28]
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	74fb      	strb	r3, [r7, #19]
            if(c==' ' || c=='\t') continue;
 8000962:	7cfb      	ldrb	r3, [r7, #19]
 8000964:	2b20      	cmp	r3, #32
 8000966:	d029      	beq.n	80009bc <process_command+0x88>
 8000968:	7cfb      	ldrb	r3, [r7, #19]
 800096a:	2b09      	cmp	r3, #9
 800096c:	d100      	bne.n	8000970 <process_command+0x3c>
 800096e:	e025      	b.n	80009bc <process_command+0x88>
            if(c=='\r' || c=='\n') break;
 8000970:	7cfb      	ldrb	r3, [r7, #19]
 8000972:	2b0d      	cmp	r3, #13
 8000974:	d029      	beq.n	80009ca <process_command+0x96>
 8000976:	7cfb      	ldrb	r3, [r7, #19]
 8000978:	2b0a      	cmp	r3, #10
 800097a:	d026      	beq.n	80009ca <process_command+0x96>
            if(c=='g'||c=='r'||c=='y'||c=='n' || c=='G'||c=='R'||c=='Y'||c=='N') {
 800097c:	7cfb      	ldrb	r3, [r7, #19]
 800097e:	2b67      	cmp	r3, #103	; 0x67
 8000980:	d014      	beq.n	80009ac <process_command+0x78>
 8000982:	7cfb      	ldrb	r3, [r7, #19]
 8000984:	2b72      	cmp	r3, #114	; 0x72
 8000986:	d011      	beq.n	80009ac <process_command+0x78>
 8000988:	7cfb      	ldrb	r3, [r7, #19]
 800098a:	2b79      	cmp	r3, #121	; 0x79
 800098c:	d00e      	beq.n	80009ac <process_command+0x78>
 800098e:	7cfb      	ldrb	r3, [r7, #19]
 8000990:	2b6e      	cmp	r3, #110	; 0x6e
 8000992:	d00b      	beq.n	80009ac <process_command+0x78>
 8000994:	7cfb      	ldrb	r3, [r7, #19]
 8000996:	2b47      	cmp	r3, #71	; 0x47
 8000998:	d008      	beq.n	80009ac <process_command+0x78>
 800099a:	7cfb      	ldrb	r3, [r7, #19]
 800099c:	2b52      	cmp	r3, #82	; 0x52
 800099e:	d005      	beq.n	80009ac <process_command+0x78>
 80009a0:	7cfb      	ldrb	r3, [r7, #19]
 80009a2:	2b59      	cmp	r3, #89	; 0x59
 80009a4:	d002      	beq.n	80009ac <process_command+0x78>
 80009a6:	7cfb      	ldrb	r3, [r7, #19]
 80009a8:	2b4e      	cmp	r3, #78	; 0x4e
 80009aa:	d10e      	bne.n	80009ca <process_command+0x96>
                seqchars[slen++] = c;
 80009ac:	69bb      	ldr	r3, [r7, #24]
 80009ae:	1c5a      	adds	r2, r3, #1
 80009b0:	61ba      	str	r2, [r7, #24]
 80009b2:	3320      	adds	r3, #32
 80009b4:	443b      	add	r3, r7
 80009b6:	7cfa      	ldrb	r2, [r7, #19]
 80009b8:	f803 2c18 	strb.w	r2, [r3, #-24]
        while(*p && slen < 8) {
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d002      	beq.n	80009ca <process_command+0x96>
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	2b07      	cmp	r3, #7
 80009c8:	ddc6      	ble.n	8000958 <process_command+0x24>
            } else break;
        }
        if(slen < 2) { uart_println("Sequence must be 2..8 symbols (g/r/y/n)"); return; }
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	dc03      	bgt.n	80009d8 <process_command+0xa4>
 80009d0:	482f      	ldr	r0, [pc, #188]	; (8000a90 <process_command+0x15c>)
 80009d2:	f7ff ff9f 	bl	8000914 <uart_println>
 80009d6:	e055      	b.n	8000a84 <process_command+0x150>
        uart_println("Enter period: 1-fast(200),2-medium(500),3-slow(1000)");
 80009d8:	482e      	ldr	r0, [pc, #184]	; (8000a94 <process_command+0x160>)
 80009da:	f7ff ff9b 	bl	8000914 <uart_println>
        awaiting_period = true;
 80009de:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <process_command+0x164>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	701a      	strb	r2, [r3, #0]
        memcpy(pending_seq, seqchars, slen);
 80009e4:	69ba      	ldr	r2, [r7, #24]
 80009e6:	f107 0308 	add.w	r3, r7, #8
 80009ea:	4619      	mov	r1, r3
 80009ec:	482b      	ldr	r0, [pc, #172]	; (8000a9c <process_command+0x168>)
 80009ee:	f002 fd4d 	bl	800348c <memcpy>
        pending_len = slen;
 80009f2:	4a2b      	ldr	r2, [pc, #172]	; (8000aa0 <process_command+0x16c>)
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	6013      	str	r3, [r2, #0]
        awaiting_period = true;
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <process_command+0x164>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
 80009fe:	e041      	b.n	8000a84 <process_command+0x150>
    } else if(strncmp(cmd, "set interrupts on", 17) == 0) {
 8000a00:	2211      	movs	r2, #17
 8000a02:	4928      	ldr	r1, [pc, #160]	; (8000aa4 <process_command+0x170>)
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f002 fd8b 	bl	8003520 <strncmp>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d106      	bne.n	8000a1e <process_command+0xea>
        USART_DRV_EnableInterrupts(true);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f000 fb6d 	bl	80010f0 <USART_DRV_EnableInterrupts>
        uart_println("interrupts on");
 8000a16:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <process_command+0x174>)
 8000a18:	f7ff ff7c 	bl	8000914 <uart_println>
 8000a1c:	e032      	b.n	8000a84 <process_command+0x150>
    } else if(strncmp(cmd, "set interrupts off", 18) == 0) {
 8000a1e:	2212      	movs	r2, #18
 8000a20:	4922      	ldr	r1, [pc, #136]	; (8000aac <process_command+0x178>)
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f002 fd7c 	bl	8003520 <strncmp>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d106      	bne.n	8000a3c <process_command+0x108>
        USART_DRV_EnableInterrupts(false);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fb5e 	bl	80010f0 <USART_DRV_EnableInterrupts>
        uart_println("interrupts off");
 8000a34:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <process_command+0x17c>)
 8000a36:	f7ff ff6d 	bl	8000914 <uart_println>
 8000a3a:	e023      	b.n	8000a84 <process_command+0x150>
    } else if(strncmp(cmd, "set ", 4) == 0) {
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	491d      	ldr	r1, [pc, #116]	; (8000ab4 <process_command+0x180>)
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f002 fd6d 	bl	8003520 <strncmp>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d118      	bne.n	8000a7e <process_command+0x14a>
        int idx = atoi(cmd+4);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3304      	adds	r3, #4
 8000a50:	4618      	mov	r0, r3
 8000a52:	f002 fced 	bl	8003430 <atoi>
 8000a56:	6178      	str	r0, [r7, #20]
        if(idx >=1 && idx <= total_presets) {
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	dd0b      	ble.n	8000a76 <process_command+0x142>
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <process_command+0x184>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	697a      	ldr	r2, [r7, #20]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dc06      	bgt.n	8000a76 <process_command+0x142>
            active_seq = idx;
 8000a68:	4a14      	ldr	r2, [pc, #80]	; (8000abc <process_command+0x188>)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	6013      	str	r3, [r2, #0]
            uart_println("ok");
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <process_command+0x18c>)
 8000a70:	f7ff ff50 	bl	8000914 <uart_println>
 8000a74:	e006      	b.n	8000a84 <process_command+0x150>
        } else {
            uart_println("invalid index");
 8000a76:	4813      	ldr	r0, [pc, #76]	; (8000ac4 <process_command+0x190>)
 8000a78:	f7ff ff4c 	bl	8000914 <uart_println>
 8000a7c:	e002      	b.n	8000a84 <process_command+0x150>
        }
    } else {
        uart_println("unknown command");
 8000a7e:	4812      	ldr	r0, [pc, #72]	; (8000ac8 <process_command+0x194>)
 8000a80:	f7ff ff48 	bl	8000914 <uart_println>
    }
}
 8000a84:	3720      	adds	r7, #32
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	08003efc 	.word	0x08003efc
 8000a90:	08003f04 	.word	0x08003f04
 8000a94:	08003f2c 	.word	0x08003f2c
 8000a98:	20000141 	.word	0x20000141
 8000a9c:	20000144 	.word	0x20000144
 8000aa0:	2000014c 	.word	0x2000014c
 8000aa4:	08003f64 	.word	0x08003f64
 8000aa8:	08003f78 	.word	0x08003f78
 8000aac:	08003f88 	.word	0x08003f88
 8000ab0:	08003f9c 	.word	0x08003f9c
 8000ab4:	08003fac 	.word	0x08003fac
 8000ab8:	20000008 	.word	0x20000008
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	08003fb4 	.word	0x08003fb4
 8000ac4:	08003fb8 	.word	0x08003fb8
 8000ac8:	08003fc8 	.word	0x08003fc8

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b590      	push	{r4, r7, lr}
 8000ace:	b08f      	sub	sp, #60	; 0x3c
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad2:	f000 fd4d 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad6:	f000 f94b 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ada:	f7ff fddb 	bl	8000694 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000ade:	f000 fa53 	bl	8000f88 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_Init();
 8000ae2:	f7ff fe2b 	bl	800073c <LED_Init>
  BUTTON_Init();
 8000ae6:	f7ff fd5d 	bl	80005a4 <BUTTON_Init>
  USART_DRV_Init(&huart6);
 8000aea:	4893      	ldr	r0, [pc, #588]	; (8000d38 <main+0x26c>)
 8000aec:	f000 fac6 	bl	800107c <USART_DRV_Init>
  USART_DRV_EnableInterrupts(true);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f000 fafd 	bl	80010f0 <USART_DRV_EnableInterrupts>
  USART_DRV_SetEcho(true);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 fc70 	bl	80013dc <USART_DRV_SetEcho>
  init_presets_defaults();
 8000afc:	f7ff feb2 	bl	8000864 <init_presets_defaults>

  uint32_t last_step_time = HAL_GetTick();
 8000b00:	f000 fd9c 	bl	800163c <HAL_GetTick>
 8000b04:	6378      	str	r0, [r7, #52]	; 0x34
  uart_println("welcome!");
 8000b06:	488d      	ldr	r0, [pc, #564]	; (8000d3c <main+0x270>)
 8000b08:	f7ff ff04 	bl	8000914 <uart_println>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	BUTTON_Process();
 8000b0c:	f7ff fd76 	bl	80005fc <BUTTON_Process>
	if(BUTTON_WasPressed()){
 8000b10:	f7ff fdac 	bl	800066c <BUTTON_WasPressed>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d011      	beq.n	8000b3e <main+0x72>
	 active_seq++;
 8000b1a:	4b89      	ldr	r3, [pc, #548]	; (8000d40 <main+0x274>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a87      	ldr	r2, [pc, #540]	; (8000d40 <main+0x274>)
 8000b22:	6013      	str	r3, [r2, #0]
	 if(active_seq > 4){
 8000b24:	4b86      	ldr	r3, [pc, #536]	; (8000d40 <main+0x274>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b04      	cmp	r3, #4
 8000b2a:	dd08      	ble.n	8000b3e <main+0x72>
		 if(active_seq > total_presets) active_seq = 1;
 8000b2c:	4b84      	ldr	r3, [pc, #528]	; (8000d40 <main+0x274>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b84      	ldr	r3, [pc, #528]	; (8000d44 <main+0x278>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dd02      	ble.n	8000b3e <main+0x72>
 8000b38:	4b81      	ldr	r3, [pc, #516]	; (8000d40 <main+0x274>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
	 }
	}

	USART_DRV_PollTx();
 8000b3e:	f000 fb95 	bl	800126c <USART_DRV_PollTx>

	// UART прием
	uint8_t ch;
	while(USART_DRV_PollGetByte(&ch)){
 8000b42:	e0a6      	b.n	8000c92 <main+0x1c6>
	 if(ch=='\n' || ch=='\r'){
 8000b44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b48:	2b0a      	cmp	r3, #10
 8000b4a:	d004      	beq.n	8000b56 <main+0x8a>
 8000b4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b50:	2b0d      	cmp	r3, #13
 8000b52:	f040 8091 	bne.w	8000c78 <main+0x1ac>
		 linebuf[linepos]=0;
 8000b56:	4b7c      	ldr	r3, [pc, #496]	; (8000d48 <main+0x27c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a7c      	ldr	r2, [pc, #496]	; (8000d4c <main+0x280>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	54d1      	strb	r1, [r2, r3]
		 if(linepos>0){
 8000b60:	4b79      	ldr	r3, [pc, #484]	; (8000d48 <main+0x27c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	f340 8083 	ble.w	8000c70 <main+0x1a4>
			 if(awaiting_period){
 8000b6a:	4b79      	ldr	r3, [pc, #484]	; (8000d50 <main+0x284>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d07b      	beq.n	8000c6a <main+0x19e>
				 if(linebuf[0]=='1'||linebuf[0]=='2'||linebuf[0]=='3'){
 8000b72:	4b76      	ldr	r3, [pc, #472]	; (8000d4c <main+0x280>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2b31      	cmp	r3, #49	; 0x31
 8000b78:	d007      	beq.n	8000b8a <main+0xbe>
 8000b7a:	4b74      	ldr	r3, [pc, #464]	; (8000d4c <main+0x280>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b32      	cmp	r3, #50	; 0x32
 8000b80:	d003      	beq.n	8000b8a <main+0xbe>
 8000b82:	4b72      	ldr	r3, [pc, #456]	; (8000d4c <main+0x280>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b33      	cmp	r3, #51	; 0x33
 8000b88:	d16b      	bne.n	8000c62 <main+0x196>
					 uint32_t period=500;
 8000b8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
					 if(linebuf[0]=='1') period=200;
 8000b90:	4b6e      	ldr	r3, [pc, #440]	; (8000d4c <main+0x280>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b31      	cmp	r3, #49	; 0x31
 8000b96:	d101      	bne.n	8000b9c <main+0xd0>
 8000b98:	23c8      	movs	r3, #200	; 0xc8
 8000b9a:	633b      	str	r3, [r7, #48]	; 0x30
					 if(linebuf[0]=='2') period=500;
 8000b9c:	4b6b      	ldr	r3, [pc, #428]	; (8000d4c <main+0x280>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b32      	cmp	r3, #50	; 0x32
 8000ba2:	d102      	bne.n	8000baa <main+0xde>
 8000ba4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
					 if(linebuf[0]=='3') period=1000;
 8000baa:	4b68      	ldr	r3, [pc, #416]	; (8000d4c <main+0x280>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b33      	cmp	r3, #51	; 0x33
 8000bb0:	d102      	bne.n	8000bb8 <main+0xec>
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
					 for(int i=0;i<pending_len;i++) presets[next_user_slot].seq[i]=char_to_mask(pending_seq[i]);
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bbc:	e014      	b.n	8000be8 <main+0x11c>
 8000bbe:	4a65      	ldr	r2, [pc, #404]	; (8000d54 <main+0x288>)
 8000bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc2:	4413      	add	r3, r2
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4a64      	ldr	r2, [pc, #400]	; (8000d58 <main+0x28c>)
 8000bc8:	6814      	ldr	r4, [r2, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fe26 	bl	800081c <char_to_mask>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4a61      	ldr	r2, [pc, #388]	; (8000d5c <main+0x290>)
 8000bd6:	0123      	lsls	r3, r4, #4
 8000bd8:	441a      	add	r2, r3
 8000bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bdc:	4413      	add	r3, r2
 8000bde:	460a      	mov	r2, r1
 8000be0:	701a      	strb	r2, [r3, #0]
 8000be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be4:	3301      	adds	r3, #1
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000be8:	4b5d      	ldr	r3, [pc, #372]	; (8000d60 <main+0x294>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	dbe5      	blt.n	8000bbe <main+0xf2>
					 presets[next_user_slot].len = pending_len;
 8000bf2:	4b5b      	ldr	r3, [pc, #364]	; (8000d60 <main+0x294>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b58      	ldr	r3, [pc, #352]	; (8000d58 <main+0x28c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	b2d1      	uxtb	r1, r2
 8000bfc:	4a57      	ldr	r2, [pc, #348]	; (8000d5c <main+0x290>)
 8000bfe:	011b      	lsls	r3, r3, #4
 8000c00:	4413      	add	r3, r2
 8000c02:	3308      	adds	r3, #8
 8000c04:	460a      	mov	r2, r1
 8000c06:	701a      	strb	r2, [r3, #0]
					 presets[next_user_slot].period_ms = period;
 8000c08:	4b53      	ldr	r3, [pc, #332]	; (8000d58 <main+0x28c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a53      	ldr	r2, [pc, #332]	; (8000d5c <main+0x290>)
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	4413      	add	r3, r2
 8000c12:	330c      	adds	r3, #12
 8000c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c16:	601a      	str	r2, [r3, #0]
					 char tmp[32];
					 snprintf(tmp,sizeof(tmp),"saved %d", next_user_slot);
 8000c18:	4b4f      	ldr	r3, [pc, #316]	; (8000d58 <main+0x28c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	1d38      	adds	r0, r7, #4
 8000c1e:	4a51      	ldr	r2, [pc, #324]	; (8000d64 <main+0x298>)
 8000c20:	2120      	movs	r1, #32
 8000c22:	f002 fc49 	bl	80034b8 <sniprintf>
					 uart_println(tmp);
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe73 	bl	8000914 <uart_println>

					 if(next_user_slot > total_presets) total_presets = next_user_slot;
 8000c2e:	4b4a      	ldr	r3, [pc, #296]	; (8000d58 <main+0x28c>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <main+0x278>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	dd03      	ble.n	8000c42 <main+0x176>
 8000c3a:	4b47      	ldr	r3, [pc, #284]	; (8000d58 <main+0x28c>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a41      	ldr	r2, [pc, #260]	; (8000d44 <main+0x278>)
 8000c40:	6013      	str	r3, [r2, #0]

					 next_user_slot++;
 8000c42:	4b45      	ldr	r3, [pc, #276]	; (8000d58 <main+0x28c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a43      	ldr	r2, [pc, #268]	; (8000d58 <main+0x28c>)
 8000c4a:	6013      	str	r3, [r2, #0]
					 if(next_user_slot > 8) next_user_slot = 5;
 8000c4c:	4b42      	ldr	r3, [pc, #264]	; (8000d58 <main+0x28c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b08      	cmp	r3, #8
 8000c52:	dd02      	ble.n	8000c5a <main+0x18e>
 8000c54:	4b40      	ldr	r3, [pc, #256]	; (8000d58 <main+0x28c>)
 8000c56:	2205      	movs	r2, #5
 8000c58:	601a      	str	r2, [r3, #0]
					 awaiting_period=false;
 8000c5a:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <main+0x284>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
				 if(linebuf[0]=='1'||linebuf[0]=='2'||linebuf[0]=='3'){
 8000c60:	e006      	b.n	8000c70 <main+0x1a4>
				 } else {
					 uart_println("invalid period; enter 1/2/3");
 8000c62:	4841      	ldr	r0, [pc, #260]	; (8000d68 <main+0x29c>)
 8000c64:	f7ff fe56 	bl	8000914 <uart_println>
 8000c68:	e002      	b.n	8000c70 <main+0x1a4>
				 }
			 } else {
				 process_command(linebuf);
 8000c6a:	4838      	ldr	r0, [pc, #224]	; (8000d4c <main+0x280>)
 8000c6c:	f7ff fe62 	bl	8000934 <process_command>
			 }
		 }
		 linepos=0;
 8000c70:	4b35      	ldr	r3, [pc, #212]	; (8000d48 <main+0x27c>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
 8000c76:	e00c      	b.n	8000c92 <main+0x1c6>
	 } else {
		 if(linepos<(int)sizeof(linebuf)-1) linebuf[linepos++]=(char)ch;
 8000c78:	4b33      	ldr	r3, [pc, #204]	; (8000d48 <main+0x27c>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b3e      	cmp	r3, #62	; 0x3e
 8000c7e:	dc08      	bgt.n	8000c92 <main+0x1c6>
 8000c80:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <main+0x27c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	1c5a      	adds	r2, r3, #1
 8000c86:	4930      	ldr	r1, [pc, #192]	; (8000d48 <main+0x27c>)
 8000c88:	600a      	str	r2, [r1, #0]
 8000c8a:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8000c8e:	4a2f      	ldr	r2, [pc, #188]	; (8000d4c <main+0x280>)
 8000c90:	54d1      	strb	r1, [r2, r3]
	while(USART_DRV_PollGetByte(&ch)){
 8000c92:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fb3c 	bl	8001314 <USART_DRV_PollGetByte>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f47f af50 	bne.w	8000b44 <main+0x78>
	 }
	}

	// анимация
	uint32_t now = HAL_GetTick();
 8000ca4:	f000 fcca 	bl	800163c <HAL_GetTick>
 8000ca8:	62b8      	str	r0, [r7, #40]	; 0x28
	if(now - last_step_time >= presets[active_seq].period_ms){
 8000caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cae:	1ad2      	subs	r2, r2, r3
 8000cb0:	4b23      	ldr	r3, [pc, #140]	; (8000d40 <main+0x274>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4929      	ldr	r1, [pc, #164]	; (8000d5c <main+0x290>)
 8000cb6:	011b      	lsls	r3, r3, #4
 8000cb8:	440b      	add	r3, r1
 8000cba:	330c      	adds	r3, #12
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	f4ff af24 	bcc.w	8000b0c <main+0x40>
	 last_step_time = now;
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	637b      	str	r3, [r7, #52]	; 0x34
	 uint8_t mask = presets[active_seq].seq[ seq_index[active_seq]%presets[active_seq].len ];
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <main+0x274>)
 8000cca:	6819      	ldr	r1, [r3, #0]
 8000ccc:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <main+0x274>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a26      	ldr	r2, [pc, #152]	; (8000d6c <main+0x2a0>)
 8000cd2:	5cd3      	ldrb	r3, [r2, r3]
 8000cd4:	4a1a      	ldr	r2, [pc, #104]	; (8000d40 <main+0x274>)
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	4820      	ldr	r0, [pc, #128]	; (8000d5c <main+0x290>)
 8000cda:	0112      	lsls	r2, r2, #4
 8000cdc:	4402      	add	r2, r0
 8000cde:	3208      	adds	r2, #8
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ce6:	fb00 f202 	mul.w	r2, r0, r2
 8000cea:	1a9b      	subs	r3, r3, r2
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	4a1a      	ldr	r2, [pc, #104]	; (8000d5c <main+0x290>)
 8000cf2:	010b      	lsls	r3, r1, #4
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4403      	add	r3, r0
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	 LED_SetMask(mask);
 8000cfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd53 	bl	80007b0 <LED_SetMask>
	 seq_index[active_seq] = (seq_index[active_seq]+1)%presets[active_seq].len;
 8000d0a:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <main+0x274>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <main+0x2a0>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	3301      	adds	r3, #1
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <main+0x274>)
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	4910      	ldr	r1, [pc, #64]	; (8000d5c <main+0x290>)
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	440a      	add	r2, r1
 8000d1e:	3208      	adds	r2, #8
 8000d20:	7812      	ldrb	r2, [r2, #0]
 8000d22:	fb93 f1f2 	sdiv	r1, r3, r2
 8000d26:	fb01 f202 	mul.w	r2, r1, r2
 8000d2a:	1a9a      	subs	r2, r3, r2
 8000d2c:	4b04      	ldr	r3, [pc, #16]	; (8000d40 <main+0x274>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	b2d1      	uxtb	r1, r2
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <main+0x2a0>)
 8000d34:	54d1      	strb	r1, [r2, r3]
  {
 8000d36:	e6e9      	b.n	8000b0c <main+0x40>
 8000d38:	20000198 	.word	0x20000198
 8000d3c:	08003fd8 	.word	0x08003fd8
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000190 	.word	0x20000190
 8000d4c:	20000150 	.word	0x20000150
 8000d50:	20000141 	.word	0x20000141
 8000d54:	20000144 	.word	0x20000144
 8000d58:	20000004 	.word	0x20000004
 8000d5c:	200000a8 	.word	0x200000a8
 8000d60:	2000014c 	.word	0x2000014c
 8000d64:	08003fe4 	.word	0x08003fe4
 8000d68:	08003ff0 	.word	0x08003ff0
 8000d6c:	20000138 	.word	0x20000138

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fb92 	bl	80034a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	4b23      	ldr	r3, [pc, #140]	; (8000e28 <SystemClock_Config+0xb8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <SystemClock_Config+0xb8>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <SystemClock_Config+0xb8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <SystemClock_Config+0xbc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dbc:	4a1b      	ldr	r2, [pc, #108]	; (8000e2c <SystemClock_Config+0xbc>)
 8000dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <SystemClock_Config+0xbc>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 ffb7 	bl	8001d58 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000df0:	f000 f81e 	bl	8000e30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 fa1a 	bl	8002248 <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e1a:	f000 f809 	bl	8000e30 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3750      	adds	r7, #80	; 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e38:	e7fe      	b.n	8000e38 <Error_Handler+0x8>
	...

08000e3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a0f      	ldr	r2, [pc, #60]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a08      	ldr	r2, [pc, #32]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_MspInit+0x4c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e76:	603b      	str	r3, [r7, #0]
 8000e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	370c      	adds	r7, #12
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 fb9c 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  USART_DRV_IRQ_Handler();
 8000ee4:	f000 fa8a 	bl	80013fc <USART_DRV_IRQ_Handler>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ee8:	4802      	ldr	r0, [pc, #8]	; (8000ef4 <USART6_IRQHandler+0x14>)
 8000eea:	f001 fbdb 	bl	80026a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000198 	.word	0x20000198

08000ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <_sbrk+0x5c>)
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <_sbrk+0x60>)
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d102      	bne.n	8000f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <_sbrk+0x64>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <_sbrk+0x68>)
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <_sbrk+0x64>)
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4413      	add	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d207      	bcs.n	8000f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f28:	f002 fa86 	bl	8003438 <__errno>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	220c      	movs	r2, #12
 8000f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e009      	b.n	8000f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3e:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4413      	add	r3, r2
 8000f46:	4a05      	ldr	r2, [pc, #20]	; (8000f5c <_sbrk+0x64>)
 8000f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20030000 	.word	0x20030000
 8000f58:	00000400 	.word	0x00000400
 8000f5c:	20000194 	.word	0x20000194
 8000f60:	20000380 	.word	0x20000380

08000f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <SystemInit+0x20>)
 8000f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6e:	4a05      	ldr	r2, [pc, #20]	; (8000f84 <SystemInit+0x20>)
 8000f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <MX_USART6_UART_Init>:
UART_HandleTypeDef huart6;

/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <MX_USART6_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f94:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_USART6_UART_Init+0x4c>)
 8000fc0:	f001 fb22 	bl	8002608 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f7ff ff31 	bl	8000e30 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000198 	.word	0x20000198
 8000fd8:	40011400 	.word	0x40011400

08000fdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART6)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a1d      	ldr	r2, [pc, #116]	; (8001070 <HAL_UART_MspInit+0x94>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d133      	bne.n	8001066 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* USART6 clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	4b1c      	ldr	r3, [pc, #112]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001008:	f043 0320 	orr.w	r3, r3, #32
 800100c:	6453      	str	r3, [r2, #68]	; 0x44
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f003 0320 	and.w	r3, r3, #32
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <HAL_UART_MspInit+0x98>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <HAL_UART_MspInit+0x98>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001036:	23c0      	movs	r3, #192	; 0xc0
 8001038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2303      	movs	r3, #3
 8001044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001046:	2308      	movs	r3, #8
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0314 	add.w	r3, r7, #20
 800104e:	4619      	mov	r1, r3
 8001050:	4809      	ldr	r0, [pc, #36]	; (8001078 <HAL_UART_MspInit+0x9c>)
 8001052:	f000 fca3 	bl	800199c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2100      	movs	r1, #0
 800105a:	2047      	movs	r0, #71	; 0x47
 800105c:	f000 fbd5 	bl	800180a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001060:	2047      	movs	r0, #71	; 0x47
 8001062:	f000 fbee 	bl	8001842 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40011400 	.word	0x40011400
 8001074:	40023800 	.word	0x40023800
 8001078:	40020800 	.word	0x40020800

0800107c <USART_DRV_Init>:
static volatile bool interrupts_enabled = true;
static bool echo = true;

/* ==================== INIT ==================== */
void USART_DRV_Init(UART_HandleTypeDef *huart)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
    huart_ptr = huart;
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <USART_DRV_Init+0x58>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
    rx_head = rx_tail = 0;
 800108a:	2100      	movs	r1, #0
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <USART_DRV_Init+0x5c>)
 800108e:	460a      	mov	r2, r1
 8001090:	801a      	strh	r2, [r3, #0]
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <USART_DRV_Init+0x60>)
 8001094:	460a      	mov	r2, r1
 8001096:	801a      	strh	r2, [r3, #0]
    tx_head = tx_tail = 0;
 8001098:	2100      	movs	r1, #0
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <USART_DRV_Init+0x64>)
 800109c:	460a      	mov	r2, r1
 800109e:	801a      	strh	r2, [r3, #0]
 80010a0:	4b10      	ldr	r3, [pc, #64]	; (80010e4 <USART_DRV_Init+0x68>)
 80010a2:	460a      	mov	r2, r1
 80010a4:	801a      	strh	r2, [r3, #0]
    tx_busy = false;
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <USART_DRV_Init+0x6c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    interrupts_enabled = true;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <USART_DRV_Init+0x70>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	701a      	strb	r2, [r3, #0]
    __HAL_UART_ENABLE_IT(huart_ptr, UART_IT_RXNE); // включаем приём по прерыванию
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <USART_DRV_Init+0x58>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	68da      	ldr	r2, [r3, #12]
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <USART_DRV_Init+0x58>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 0220 	orr.w	r2, r2, #32
 80010c4:	60da      	str	r2, [r3, #12]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	200001dc 	.word	0x200001dc
 80010d8:	20000262 	.word	0x20000262
 80010dc:	20000260 	.word	0x20000260
 80010e0:	20000366 	.word	0x20000366
 80010e4:	20000364 	.word	0x20000364
 80010e8:	20000368 	.word	0x20000368
 80010ec:	20000010 	.word	0x20000010

080010f0 <USART_DRV_EnableInterrupts>:

/* ==================== ENABLE / DISABLE IRQ ==================== */
void USART_DRV_EnableInterrupts(bool en)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
    if(!huart_ptr) return;
 80010fa:	4b21      	ldr	r3, [pc, #132]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d037      	beq.n	8001172 <USART_DRV_EnableInterrupts+0x82>
    interrupts_enabled = en;
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <USART_DRV_EnableInterrupts+0x94>)
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	7013      	strb	r3, [r2, #0]
    if(en) {
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01c      	beq.n	8001148 <USART_DRV_EnableInterrupts+0x58>
        __HAL_UART_ENABLE_IT(huart_ptr, UART_IT_RXNE);
 800110e:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 0220 	orr.w	r2, r2, #32
 8001120:	60da      	str	r2, [r3, #12]
        if(tx_head != tx_tail)
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <USART_DRV_EnableInterrupts+0x98>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b18      	ldr	r3, [pc, #96]	; (800118c <USART_DRV_EnableInterrupts+0x9c>)
 800112a:	881b      	ldrh	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	429a      	cmp	r2, r3
 8001130:	d020      	beq.n	8001174 <USART_DRV_EnableInterrupts+0x84>
            __HAL_UART_ENABLE_IT(huart_ptr, UART_IT_TXE);
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	68da      	ldr	r2, [r3, #12]
 800113a:	4b11      	ldr	r3, [pc, #68]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	e015      	b.n	8001174 <USART_DRV_EnableInterrupts+0x84>
    } else {
        __HAL_UART_DISABLE_IT(huart_ptr, UART_IT_RXNE);
 8001148:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	4b0b      	ldr	r3, [pc, #44]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 0220 	bic.w	r2, r2, #32
 800115a:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart_ptr, UART_IT_TXE);
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <USART_DRV_EnableInterrupts+0x90>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	e000      	b.n	8001174 <USART_DRV_EnableInterrupts+0x84>
    if(!huart_ptr) return;
 8001172:	bf00      	nop
    }
}
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	200001dc 	.word	0x200001dc
 8001184:	20000010 	.word	0x20000010
 8001188:	20000364 	.word	0x20000364
 800118c:	20000366 	.word	0x20000366

08001190 <USART_DRV_IsInterruptsEnabled>:

bool USART_DRV_IsInterruptsEnabled(void){ return interrupts_enabled; }
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <USART_DRV_IsInterruptsEnabled+0x14>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	20000010 	.word	0x20000010

080011a8 <USART_DRV_TxBuf>:

/* ==================== TX ==================== */
bool USART_DRV_TxBuf(const uint8_t *buf, uint16_t len)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
    if(!huart_ptr) return false;
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <USART_DRV_TxBuf+0xac>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <USART_DRV_TxBuf+0x18>
 80011bc:	2300      	movs	r3, #0
 80011be:	e042      	b.n	8001246 <USART_DRV_TxBuf+0x9e>

    /* Пишем данные в буфер независимо от режима */
    for(uint16_t i = 0; i < len; i++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	81fb      	strh	r3, [r7, #14]
 80011c4:	e020      	b.n	8001208 <USART_DRV_TxBuf+0x60>
        uint16_t next = (tx_head + 1) % UART_TX_BUF_SIZE;
 80011c6:	4b24      	ldr	r3, [pc, #144]	; (8001258 <USART_DRV_TxBuf+0xb0>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	3301      	adds	r3, #1
 80011ce:	425a      	negs	r2, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	bf58      	it	pl
 80011d6:	4253      	negpl	r3, r2
 80011d8:	81bb      	strh	r3, [r7, #12]
        if(next == tx_tail) {
 80011da:	4b20      	ldr	r3, [pc, #128]	; (800125c <USART_DRV_TxBuf+0xb4>)
 80011dc:	881b      	ldrh	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	89ba      	ldrh	r2, [r7, #12]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d101      	bne.n	80011ea <USART_DRV_TxBuf+0x42>
            // буфер переполнен
            return false;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e02d      	b.n	8001246 <USART_DRV_TxBuf+0x9e>
        }
        tx_ring[tx_head] = buf[i];
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <USART_DRV_TxBuf+0xb0>)
 80011f2:	8812      	ldrh	r2, [r2, #0]
 80011f4:	b292      	uxth	r2, r2
 80011f6:	7819      	ldrb	r1, [r3, #0]
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <USART_DRV_TxBuf+0xb8>)
 80011fa:	5499      	strb	r1, [r3, r2]
        tx_head = next;
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <USART_DRV_TxBuf+0xb0>)
 80011fe:	89bb      	ldrh	r3, [r7, #12]
 8001200:	8013      	strh	r3, [r2, #0]
    for(uint16_t i = 0; i < len; i++) {
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	3301      	adds	r3, #1
 8001206:	81fb      	strh	r3, [r7, #14]
 8001208:	89fa      	ldrh	r2, [r7, #14]
 800120a:	887b      	ldrh	r3, [r7, #2]
 800120c:	429a      	cmp	r2, r3
 800120e:	d3da      	bcc.n	80011c6 <USART_DRV_TxBuf+0x1e>
    }

    if(interrupts_enabled) {
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <USART_DRV_TxBuf+0xbc>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d014      	beq.n	8001244 <USART_DRV_TxBuf+0x9c>
        if(!tx_busy) {
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <USART_DRV_TxBuf+0xc0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f083 0301 	eor.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00c      	beq.n	8001244 <USART_DRV_TxBuf+0x9c>
            tx_busy = true;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <USART_DRV_TxBuf+0xc0>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
            __HAL_UART_ENABLE_IT(huart_ptr, UART_IT_TXE);
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <USART_DRV_TxBuf+0xac>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <USART_DRV_TxBuf+0xac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001242:	60da      	str	r2, [r3, #12]
        }
    }

    return true;
 8001244:	2301      	movs	r3, #1
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200001dc 	.word	0x200001dc
 8001258:	20000364 	.word	0x20000364
 800125c:	20000366 	.word	0x20000366
 8001260:	20000264 	.word	0x20000264
 8001264:	20000010 	.word	0x20000010
 8001268:	20000368 	.word	0x20000368

0800126c <USART_DRV_PollTx>:

/* Периодический вызов в основном цикле при выключенных прерываниях */
void USART_DRV_PollTx(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
    if(interrupts_enabled || !huart_ptr) return;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <USART_DRV_PollTx+0x70>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d12b      	bne.n	80012d2 <USART_DRV_PollTx+0x66>
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <USART_DRV_PollTx+0x74>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d027      	beq.n	80012d2 <USART_DRV_PollTx+0x66>

    if((tx_head != tx_tail) && (__HAL_UART_GET_FLAG(huart_ptr, UART_FLAG_TXE))) {
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <USART_DRV_PollTx+0x78>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <USART_DRV_PollTx+0x7c>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	b29b      	uxth	r3, r3
 800128e:	429a      	cmp	r2, r3
 8001290:	d020      	beq.n	80012d4 <USART_DRV_PollTx+0x68>
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <USART_DRV_PollTx+0x74>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800129e:	2b80      	cmp	r3, #128	; 0x80
 80012a0:	d118      	bne.n	80012d4 <USART_DRV_PollTx+0x68>
        huart_ptr->Instance->DR = tx_ring[tx_tail];
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <USART_DRV_PollTx+0x7c>)
 80012a4:	881b      	ldrh	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <USART_DRV_PollTx+0x80>)
 80012ac:	5c9b      	ldrb	r3, [r3, r2]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <USART_DRV_PollTx+0x74>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
        tx_tail = (tx_tail + 1) % UART_TX_BUF_SIZE;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <USART_DRV_PollTx+0x7c>)
 80012ba:	881b      	ldrh	r3, [r3, #0]
 80012bc:	b29b      	uxth	r3, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	425a      	negs	r2, r3
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	bf58      	it	pl
 80012c8:	4253      	negpl	r3, r2
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <USART_DRV_PollTx+0x7c>)
 80012ce:	801a      	strh	r2, [r3, #0]
 80012d0:	e000      	b.n	80012d4 <USART_DRV_PollTx+0x68>
    if(interrupts_enabled || !huart_ptr) return;
 80012d2:	bf00      	nop
    }
}
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000010 	.word	0x20000010
 80012e0:	200001dc 	.word	0x200001dc
 80012e4:	20000364 	.word	0x20000364
 80012e8:	20000366 	.word	0x20000366
 80012ec:	20000264 	.word	0x20000264

080012f0 <USART_DRV_TxStr>:

bool USART_DRV_TxStr(const char *s)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
    return USART_DRV_TxBuf((uint8_t*)s, (uint16_t)strlen(s));
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7fe ff79 	bl	80001f0 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	b29b      	uxth	r3, r3
 8001302:	4619      	mov	r1, r3
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff4f 	bl	80011a8 <USART_DRV_TxBuf>
 800130a:	4603      	mov	r3, r0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <USART_DRV_PollGetByte>:

/* ==================== RX ==================== */
bool USART_DRV_PollGetByte(uint8_t *out)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
    if(USART_DRV_IsInterruptsEnabled()) {
 800131c:	f7ff ff38 	bl	8001190 <USART_DRV_IsInterruptsEnabled>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d02d      	beq.n	8001382 <USART_DRV_PollGetByte+0x6e>
        if(rx_head == rx_tail) return false;
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <USART_DRV_PollGetByte+0xb4>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <USART_DRV_PollGetByte+0xb8>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	429a      	cmp	r2, r3
 8001334:	d101      	bne.n	800133a <USART_DRV_PollGetByte+0x26>
 8001336:	2300      	movs	r3, #0
 8001338:	e042      	b.n	80013c0 <USART_DRV_PollGetByte+0xac>

        *out = rx_ring[rx_tail++];
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <USART_DRV_PollGetByte+0xb8>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	b29b      	uxth	r3, r3
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	b291      	uxth	r1, r2
 8001344:	4a21      	ldr	r2, [pc, #132]	; (80013cc <USART_DRV_PollGetByte+0xb8>)
 8001346:	8011      	strh	r1, [r2, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <USART_DRV_PollGetByte+0xbc>)
 800134c:	5c9b      	ldrb	r3, [r3, r2]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	701a      	strb	r2, [r3, #0]
        if(rx_tail >= UART_RX_BUF_SIZE) rx_tail = 0;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <USART_DRV_PollGetByte+0xb8>)
 8001356:	881b      	ldrh	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	2b7f      	cmp	r3, #127	; 0x7f
 800135c:	d902      	bls.n	8001364 <USART_DRV_PollGetByte+0x50>
 800135e:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <USART_DRV_PollGetByte+0xb8>)
 8001360:	2200      	movs	r2, #0
 8001362:	801a      	strh	r2, [r3, #0]

        if(echo) {
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <USART_DRV_PollGetByte+0xc0>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d008      	beq.n	800137e <USART_DRV_PollGetByte+0x6a>
            uint8_t ch = *out;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	73fb      	strb	r3, [r7, #15]
            USART_DRV_TxBuf(&ch, 1);
 8001372:	f107 030f 	add.w	r3, r7, #15
 8001376:	2101      	movs	r1, #1
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff15 	bl	80011a8 <USART_DRV_TxBuf>
        }

        return true;
 800137e:	2301      	movs	r3, #1
 8001380:	e01e      	b.n	80013c0 <USART_DRV_PollGetByte+0xac>
    } else {
        /* Поллинг без прерываний */
        if(__HAL_UART_GET_FLAG(huart_ptr, UART_FLAG_RXNE)) {
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <USART_DRV_PollGetByte+0xc4>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0320 	and.w	r3, r3, #32
 800138e:	2b20      	cmp	r3, #32
 8001390:	d115      	bne.n	80013be <USART_DRV_PollGetByte+0xaa>
            *out = (uint8_t)(huart_ptr->Instance->DR & 0xFF);
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <USART_DRV_PollGetByte+0xc4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	701a      	strb	r2, [r3, #0]
            if(echo) {
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <USART_DRV_PollGetByte+0xc0>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <USART_DRV_PollGetByte+0xa6>
                uint8_t ch = *out;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	73bb      	strb	r3, [r7, #14]
                USART_DRV_TxBuf(&ch, 1);
 80013ae:	f107 030e 	add.w	r3, r7, #14
 80013b2:	2101      	movs	r1, #1
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fef7 	bl	80011a8 <USART_DRV_TxBuf>
            }
            return true;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e000      	b.n	80013c0 <USART_DRV_PollGetByte+0xac>
        }
        return false;
 80013be:	2300      	movs	r3, #0
    }
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000260 	.word	0x20000260
 80013cc:	20000262 	.word	0x20000262
 80013d0:	200001e0 	.word	0x200001e0
 80013d4:	20000011 	.word	0x20000011
 80013d8:	200001dc 	.word	0x200001dc

080013dc <USART_DRV_SetEcho>:

void USART_DRV_SetEcho(bool en){ echo = en; }
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <USART_DRV_SetEcho+0x1c>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	7013      	strb	r3, [r2, #0]
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	20000011 	.word	0x20000011

080013fc <USART_DRV_IRQ_Handler>:

/* ==================== IRQ HANDLER ==================== */
void USART_DRV_IRQ_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
    if(!huart_ptr) return;
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <USART_DRV_IRQ_Handler+0x100>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d072      	beq.n	80014f0 <USART_DRV_IRQ_Handler+0xf4>

    uint32_t sr = huart_ptr->Instance->SR;
 800140a:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <USART_DRV_IRQ_Handler+0x100>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	607b      	str	r3, [r7, #4]

    /* --- RX --- */
    if(sr & USART_SR_RXNE) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0320 	and.w	r3, r3, #32
 800141a:	2b00      	cmp	r3, #0
 800141c:	d02e      	beq.n	800147c <USART_DRV_IRQ_Handler+0x80>
        uint8_t b = (uint8_t)(huart_ptr->Instance->DR & 0xFF);
 800141e:	4b37      	ldr	r3, [pc, #220]	; (80014fc <USART_DRV_IRQ_Handler+0x100>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	70fb      	strb	r3, [r7, #3]
        uint16_t next = (rx_head + 1) % UART_RX_BUF_SIZE;
 8001428:	4b35      	ldr	r3, [pc, #212]	; (8001500 <USART_DRV_IRQ_Handler+0x104>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	3301      	adds	r3, #1
 8001430:	425a      	negs	r2, r3
 8001432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001436:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800143a:	bf58      	it	pl
 800143c:	4253      	negpl	r3, r2
 800143e:	803b      	strh	r3, [r7, #0]
        if(next == rx_tail) {
 8001440:	4b30      	ldr	r3, [pc, #192]	; (8001504 <USART_DRV_IRQ_Handler+0x108>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	b29b      	uxth	r3, r3
 8001446:	883a      	ldrh	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d10d      	bne.n	8001468 <USART_DRV_IRQ_Handler+0x6c>
            // переполнение — дропаем старый байт
            rx_tail = (rx_tail + 1) % UART_RX_BUF_SIZE;
 800144c:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <USART_DRV_IRQ_Handler+0x108>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	3301      	adds	r3, #1
 8001454:	425a      	negs	r2, r3
 8001456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800145a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800145e:	bf58      	it	pl
 8001460:	4253      	negpl	r3, r2
 8001462:	b29a      	uxth	r2, r3
 8001464:	4b27      	ldr	r3, [pc, #156]	; (8001504 <USART_DRV_IRQ_Handler+0x108>)
 8001466:	801a      	strh	r2, [r3, #0]
        }
        rx_ring[rx_head] = b;
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <USART_DRV_IRQ_Handler+0x104>)
 800146a:	881b      	ldrh	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4619      	mov	r1, r3
 8001470:	4a25      	ldr	r2, [pc, #148]	; (8001508 <USART_DRV_IRQ_Handler+0x10c>)
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	5453      	strb	r3, [r2, r1]
        rx_head = next;
 8001476:	4a22      	ldr	r2, [pc, #136]	; (8001500 <USART_DRV_IRQ_Handler+0x104>)
 8001478:	883b      	ldrh	r3, [r7, #0]
 800147a:	8013      	strh	r3, [r2, #0]
    }

    /* --- TX --- */
    if((sr & USART_SR_TXE) && tx_head != tx_tail) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001482:	2b00      	cmp	r3, #0
 8001484:	d01e      	beq.n	80014c4 <USART_DRV_IRQ_Handler+0xc8>
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <USART_DRV_IRQ_Handler+0x110>)
 8001488:	881b      	ldrh	r3, [r3, #0]
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <USART_DRV_IRQ_Handler+0x114>)
 800148e:	881b      	ldrh	r3, [r3, #0]
 8001490:	b29b      	uxth	r3, r3
 8001492:	429a      	cmp	r2, r3
 8001494:	d016      	beq.n	80014c4 <USART_DRV_IRQ_Handler+0xc8>
        huart_ptr->Instance->DR = tx_ring[tx_tail];
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <USART_DRV_IRQ_Handler+0x114>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	b29b      	uxth	r3, r3
 800149c:	461a      	mov	r2, r3
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <USART_DRV_IRQ_Handler+0x118>)
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <USART_DRV_IRQ_Handler+0x100>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
        tx_tail = (tx_tail + 1) % UART_TX_BUF_SIZE;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <USART_DRV_IRQ_Handler+0x114>)
 80014ae:	881b      	ldrh	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	3301      	adds	r3, #1
 80014b4:	425a      	negs	r2, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	bf58      	it	pl
 80014bc:	4253      	negpl	r3, r2
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <USART_DRV_IRQ_Handler+0x114>)
 80014c2:	801a      	strh	r2, [r3, #0]
    }

    if(tx_head == tx_tail) {
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <USART_DRV_IRQ_Handler+0x110>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <USART_DRV_IRQ_Handler+0x114>)
 80014cc:	881b      	ldrh	r3, [r3, #0]
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d10e      	bne.n	80014f2 <USART_DRV_IRQ_Handler+0xf6>
        __HAL_UART_DISABLE_IT(huart_ptr, UART_IT_TXE);
 80014d4:	4b09      	ldr	r3, [pc, #36]	; (80014fc <USART_DRV_IRQ_Handler+0x100>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	4b07      	ldr	r3, [pc, #28]	; (80014fc <USART_DRV_IRQ_Handler+0x100>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014e6:	60da      	str	r2, [r3, #12]
        tx_busy = false;
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <USART_DRV_IRQ_Handler+0x11c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e000      	b.n	80014f2 <USART_DRV_IRQ_Handler+0xf6>
    if(!huart_ptr) return;
 80014f0:	bf00      	nop
    }
}
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	200001dc 	.word	0x200001dc
 8001500:	20000260 	.word	0x20000260
 8001504:	20000262 	.word	0x20000262
 8001508:	200001e0 	.word	0x200001e0
 800150c:	20000364 	.word	0x20000364
 8001510:	20000366 	.word	0x20000366
 8001514:	20000264 	.word	0x20000264
 8001518:	20000368 	.word	0x20000368

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480d      	ldr	r0, [pc, #52]	; (8001558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001522:	490e      	ldr	r1, [pc, #56]	; (800155c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001524:	4a0e      	ldr	r2, [pc, #56]	; (8001560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001538:	4c0b      	ldr	r4, [pc, #44]	; (8001568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001546:	f7ff fd0d 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f001 ff7b 	bl	8003444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff fabd 	bl	8000acc <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001560:	08004168 	.word	0x08004168
  ldr r2, =_sbss
 8001564:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001568:	20000380 	.word	0x20000380

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_Init+0x40>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_Init+0x40>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x40>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 f92b 	bl	80017f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fc4a 	bl	8000e3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 f943 	bl	800185e <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 f90b 	bl	800180a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	2000000c 	.word	0x2000000c
 800160c:	20000018 	.word	0x20000018
 8001610:	20000014 	.word	0x20000014

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000018 	.word	0x20000018
 8001638:	2000036c 	.word	0x2000036c

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000036c 	.word	0x2000036c

08001654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001664:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166a:	68ba      	ldr	r2, [r7, #8]
 800166c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001670:	4013      	ands	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800167c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001686:	4a04      	ldr	r2, [pc, #16]	; (8001698 <__NVIC_SetPriorityGrouping+0x44>)
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	60d3      	str	r3, [r2, #12]
}
 800168c:	bf00      	nop
 800168e:	3714      	adds	r7, #20
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <__NVIC_GetPriorityGrouping+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 0307 	and.w	r3, r3, #7
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	db0b      	blt.n	80016e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	f003 021f 	and.w	r2, r3, #31
 80016d0:	4907      	ldr	r1, [pc, #28]	; (80016f0 <__NVIC_EnableIRQ+0x38>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f202 	lsl.w	r2, r0, r2
 80016de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000e100 	.word	0xe000e100

080016f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	2b00      	cmp	r3, #0
 8001706:	db0a      	blt.n	800171e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	b2da      	uxtb	r2, r3
 800170c:	490c      	ldr	r1, [pc, #48]	; (8001740 <__NVIC_SetPriority+0x4c>)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	0112      	lsls	r2, r2, #4
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	440b      	add	r3, r1
 8001718:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800171c:	e00a      	b.n	8001734 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4908      	ldr	r1, [pc, #32]	; (8001744 <__NVIC_SetPriority+0x50>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	f003 030f 	and.w	r3, r3, #15
 800172a:	3b04      	subs	r3, #4
 800172c:	0112      	lsls	r2, r2, #4
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	440b      	add	r3, r1
 8001732:	761a      	strb	r2, [r3, #24]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001748:	b480      	push	{r7}
 800174a:	b089      	sub	sp, #36	; 0x24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f1c3 0307 	rsb	r3, r3, #7
 8001762:	2b04      	cmp	r3, #4
 8001764:	bf28      	it	cs
 8001766:	2304      	movcs	r3, #4
 8001768:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	3304      	adds	r3, #4
 800176e:	2b06      	cmp	r3, #6
 8001770:	d902      	bls.n	8001778 <NVIC_EncodePriority+0x30>
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3b03      	subs	r3, #3
 8001776:	e000      	b.n	800177a <NVIC_EncodePriority+0x32>
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	f04f 32ff 	mov.w	r2, #4294967295
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43da      	mvns	r2, r3
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	401a      	ands	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001790:	f04f 31ff 	mov.w	r1, #4294967295
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	fa01 f303 	lsl.w	r3, r1, r3
 800179a:	43d9      	mvns	r1, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	4313      	orrs	r3, r2
         );
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3724      	adds	r7, #36	; 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017c0:	d301      	bcc.n	80017c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c2:	2301      	movs	r3, #1
 80017c4:	e00f      	b.n	80017e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <SysTick_Config+0x40>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ce:	210f      	movs	r1, #15
 80017d0:	f04f 30ff 	mov.w	r0, #4294967295
 80017d4:	f7ff ff8e 	bl	80016f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <SysTick_Config+0x40>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017de:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <SysTick_Config+0x40>)
 80017e0:	2207      	movs	r2, #7
 80017e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	e000e010 	.word	0xe000e010

080017f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f7ff ff29 	bl	8001654 <__NVIC_SetPriorityGrouping>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800180a:	b580      	push	{r7, lr}
 800180c:	b086      	sub	sp, #24
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff3e 	bl	800169c <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff8e 	bl	8001748 <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5d 	bl	80016f4 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4603      	mov	r3, r0
 800184a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff ff31 	bl	80016b8 <__NVIC_EnableIRQ>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffa2 	bl	80017b0 <SysTick_Config>
 800186c:	4603      	mov	r3, r0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001884:	f7ff feda 	bl	800163c <HAL_GetTick>
 8001888:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d008      	beq.n	80018a8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2280      	movs	r2, #128	; 0x80
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e052      	b.n	800194e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 0216 	bic.w	r2, r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <HAL_DMA_Abort+0x62>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0208 	bic.w	r2, r2, #8
 80018e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f8:	e013      	b.n	8001922 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018fa:	f7ff fe9f 	bl	800163c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b05      	cmp	r3, #5
 8001906:	d90c      	bls.n	8001922 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2220      	movs	r2, #32
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e015      	b.n	800194e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1e4      	bne.n	80018fa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001934:	223f      	movs	r2, #63	; 0x3f
 8001936:	409a      	lsls	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001964:	b2db      	uxtb	r3, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d004      	beq.n	8001974 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2280      	movs	r2, #128	; 0x80
 800196e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e00c      	b.n	800198e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2205      	movs	r2, #5
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0201 	bic.w	r2, r2, #1
 800198a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e177      	b.n	8001ca8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019b8:	2201      	movs	r2, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4013      	ands	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	f040 8166 	bne.w	8001ca2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d005      	beq.n	80019ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d130      	bne.n	8001a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a24:	2201      	movs	r2, #1
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	091b      	lsrs	r3, r3, #4
 8001a3a:	f003 0201 	and.w	r2, r3, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 0303 	and.w	r3, r3, #3
 8001a58:	2b03      	cmp	r3, #3
 8001a5a:	d017      	beq.n	8001a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d123      	bne.n	8001ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	08da      	lsrs	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3208      	adds	r2, #8
 8001aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	691a      	ldr	r2, [r3, #16]
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	08da      	lsrs	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	3208      	adds	r2, #8
 8001ada:	69b9      	ldr	r1, [r7, #24]
 8001adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80c0 	beq.w	8001ca2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b66      	ldr	r3, [pc, #408]	; (8001cc0 <HAL_GPIO_Init+0x324>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	4a65      	ldr	r2, [pc, #404]	; (8001cc0 <HAL_GPIO_Init+0x324>)
 8001b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b30:	6453      	str	r3, [r2, #68]	; 0x44
 8001b32:	4b63      	ldr	r3, [pc, #396]	; (8001cc0 <HAL_GPIO_Init+0x324>)
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b3e:	4a61      	ldr	r2, [pc, #388]	; (8001cc4 <HAL_GPIO_Init+0x328>)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	220f      	movs	r2, #15
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a58      	ldr	r2, [pc, #352]	; (8001cc8 <HAL_GPIO_Init+0x32c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d037      	beq.n	8001bda <HAL_GPIO_Init+0x23e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a57      	ldr	r2, [pc, #348]	; (8001ccc <HAL_GPIO_Init+0x330>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d031      	beq.n	8001bd6 <HAL_GPIO_Init+0x23a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a56      	ldr	r2, [pc, #344]	; (8001cd0 <HAL_GPIO_Init+0x334>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d02b      	beq.n	8001bd2 <HAL_GPIO_Init+0x236>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a55      	ldr	r2, [pc, #340]	; (8001cd4 <HAL_GPIO_Init+0x338>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d025      	beq.n	8001bce <HAL_GPIO_Init+0x232>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a54      	ldr	r2, [pc, #336]	; (8001cd8 <HAL_GPIO_Init+0x33c>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d01f      	beq.n	8001bca <HAL_GPIO_Init+0x22e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a53      	ldr	r2, [pc, #332]	; (8001cdc <HAL_GPIO_Init+0x340>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d019      	beq.n	8001bc6 <HAL_GPIO_Init+0x22a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a52      	ldr	r2, [pc, #328]	; (8001ce0 <HAL_GPIO_Init+0x344>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d013      	beq.n	8001bc2 <HAL_GPIO_Init+0x226>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a51      	ldr	r2, [pc, #324]	; (8001ce4 <HAL_GPIO_Init+0x348>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d00d      	beq.n	8001bbe <HAL_GPIO_Init+0x222>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_GPIO_Init+0x34c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d007      	beq.n	8001bba <HAL_GPIO_Init+0x21e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4f      	ldr	r2, [pc, #316]	; (8001cec <HAL_GPIO_Init+0x350>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_GPIO_Init+0x21a>
 8001bb2:	2309      	movs	r3, #9
 8001bb4:	e012      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	e010      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bba:	2308      	movs	r3, #8
 8001bbc:	e00e      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	e00c      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bc2:	2306      	movs	r3, #6
 8001bc4:	e00a      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bc6:	2305      	movs	r3, #5
 8001bc8:	e008      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bca:	2304      	movs	r3, #4
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e004      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e002      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_GPIO_Init+0x240>
 8001bda:	2300      	movs	r3, #0
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f002 0203 	and.w	r2, r2, #3
 8001be2:	0092      	lsls	r2, r2, #2
 8001be4:	4093      	lsls	r3, r2
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bec:	4935      	ldr	r1, [pc, #212]	; (8001cc4 <HAL_GPIO_Init+0x328>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	089b      	lsrs	r3, r3, #2
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c1e:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c48:	4a29      	ldr	r2, [pc, #164]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c78:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	43db      	mvns	r3, r3
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	4013      	ands	r3, r2
 8001c86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9c:	4a14      	ldr	r2, [pc, #80]	; (8001cf0 <HAL_GPIO_Init+0x354>)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	61fb      	str	r3, [r7, #28]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2b0f      	cmp	r3, #15
 8001cac:	f67f ae84 	bls.w	80019b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3724      	adds	r7, #36	; 0x24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40013800 	.word	0x40013800
 8001cc8:	40020000 	.word	0x40020000
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020800 	.word	0x40020800
 8001cd4:	40020c00 	.word	0x40020c00
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40021c00 	.word	0x40021c00
 8001ce8:	40022000 	.word	0x40022000
 8001cec:	40022400 	.word	0x40022400
 8001cf0:	40013c00 	.word	0x40013c00

08001cf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d002      	beq.n	8001d12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e001      	b.n	8001d16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d12:	2300      	movs	r3, #0
 8001d14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
 8001d30:	4613      	mov	r3, r2
 8001d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d34:	787b      	ldrb	r3, [r7, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d40:	e003      	b.n	8001d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e267      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d075      	beq.n	8001e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d76:	4b88      	ldr	r3, [pc, #544]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b85      	ldr	r3, [pc, #532]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d112      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b82      	ldr	r3, [pc, #520]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d9a:	d10b      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b7e      	ldr	r3, [pc, #504]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05b      	beq.n	8001e60 <HAL_RCC_OscConfig+0x108>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d157      	bne.n	8001e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e242      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x74>
 8001dbe:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b70      	ldr	r3, [pc, #448]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6f      	ldr	r2, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6c      	ldr	r2, [pc, #432]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001df0:	4b69      	ldr	r3, [pc, #420]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a68      	ldr	r2, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a65      	ldr	r2, [pc, #404]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fc14 	bl	800163c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fc10 	bl	800163c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	; 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e207      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xc0>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fc00 	bl	800163c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fbfc 	bl	800163c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1f3      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b51      	ldr	r3, [pc, #324]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xe8>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b47      	ldr	r3, [pc, #284]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b44      	ldr	r3, [pc, #272]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c7      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4937      	ldr	r1, [pc, #220]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fbb5 	bl	800163c <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fbb1 	bl	800163c <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a8      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b28      	ldr	r3, [pc, #160]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4925      	ldr	r1, [pc, #148]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fb94 	bl	800163c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fb90 	bl	800163c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e187      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fb74 	bl	800163c <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fb70 	bl	800163c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e167      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x200>
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fb5d 	bl	800163c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	e00e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f86:	f7ff fb59 	bl	800163c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d907      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e150      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b88      	ldr	r3, [pc, #544]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ea      	bne.n	8001f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8097 	beq.w	80020ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b7d      	ldr	r3, [pc, #500]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	4a7c      	ldr	r2, [pc, #496]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fde:	4b7a      	ldr	r3, [pc, #488]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b77      	ldr	r3, [pc, #476]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b74      	ldr	r3, [pc, #464]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a73      	ldr	r2, [pc, #460]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff fb19 	bl	800163c <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff fb15 	bl	800163c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e10c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b6a      	ldr	r3, [pc, #424]	; (80021cc <HAL_RCC_OscConfig+0x474>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x2ea>
 8002034:	4b64      	ldr	r3, [pc, #400]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	4a63      	ldr	r2, [pc, #396]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	; 0x70
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x30c>
 800204a:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a5e      	ldr	r2, [pc, #376]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205a:	4a5b      	ldr	r2, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6713      	str	r3, [r2, #112]	; 0x70
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002064:	4b58      	ldr	r3, [pc, #352]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002068:	4a57      	ldr	r2, [pc, #348]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	; 0x70
 8002070:	4b55      	ldr	r3, [pc, #340]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002074:	4a54      	ldr	r2, [pc, #336]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff fada 	bl	800163c <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff fad6 	bl	800163c <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	; 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0cb      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ee      	beq.n	800208c <HAL_RCC_OscConfig+0x334>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fac4 	bl	800163c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff fac0 	bl	800163c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0b5      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ee      	bne.n	80020b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b39      	ldr	r3, [pc, #228]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4a38      	ldr	r2, [pc, #224]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a1 	beq.w	8002238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f6:	4b34      	ldr	r3, [pc, #208]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d05c      	beq.n	80021bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d141      	bne.n	800218e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fa94 	bl	800163c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff fa90 	bl	800163c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e087      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	491b      	ldr	r1, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fa69 	bl	800163c <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fa65 	bl	800163c <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e05c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x416>
 800218c:	e054      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fa52 	bl	800163c <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fa4e 	bl	800163c <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e045      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_RCC_OscConfig+0x470>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
 80021ba:	e03d      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e038      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	; (8002244 <HAL_RCC_OscConfig+0x4ec>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d028      	beq.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d121      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11a      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800220a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cc      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b68      	ldr	r3, [pc, #416]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d90c      	bls.n	8002284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b65      	ldr	r3, [pc, #404]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d044      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d119      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	2b03      	cmp	r3, #3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e067      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b37      	ldr	r3, [pc, #220]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4934      	ldr	r1, [pc, #208]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff f980 	bl	800163c <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff f97c 	bl	800163c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2b      	ldr	r3, [pc, #172]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b25      	ldr	r3, [pc, #148]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d20c      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b22      	ldr	r3, [pc, #136]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	; (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff f8e0 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	0800400c 	.word	0x0800400c
 800240c:	2000000c 	.word	0x2000000c
 8002410:	20000014 	.word	0x20000014

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b090      	sub	sp, #64	; 0x40
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	637b      	str	r3, [r7, #52]	; 0x34
 8002420:	2300      	movs	r3, #0
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242c:	4b59      	ldr	r3, [pc, #356]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d00d      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 8002438:	2b08      	cmp	r3, #8
 800243a:	f200 80a1 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 8002442:	2b04      	cmp	r3, #4
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x3a>
 8002446:	e09b      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b53      	ldr	r3, [pc, #332]	; (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800244c:	e09b      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002450:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002452:	e098      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b4f      	ldr	r3, [pc, #316]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800245c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245e:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d028      	beq.n	80024bc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	2200      	movs	r2, #0
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	627a      	str	r2, [r7, #36]	; 0x24
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800247c:	2100      	movs	r1, #0
 800247e:	4b47      	ldr	r3, [pc, #284]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 8002480:	fb03 f201 	mul.w	r2, r3, r1
 8002484:	2300      	movs	r3, #0
 8002486:	fb00 f303 	mul.w	r3, r0, r3
 800248a:	4413      	add	r3, r2
 800248c:	4a43      	ldr	r2, [pc, #268]	; (800259c <HAL_RCC_GetSysClockFreq+0x188>)
 800248e:	fba0 1202 	umull	r1, r2, r0, r2
 8002492:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002494:	460a      	mov	r2, r1
 8002496:	62ba      	str	r2, [r7, #40]	; 0x28
 8002498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800249a:	4413      	add	r3, r2
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a0:	2200      	movs	r2, #0
 80024a2:	61bb      	str	r3, [r7, #24]
 80024a4:	61fa      	str	r2, [r7, #28]
 80024a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024aa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ae:	f7fd fef7 	bl	80002a0 <__aeabi_uldivmod>
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	4613      	mov	r3, r2
 80024b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024ba:	e053      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024bc:	4b35      	ldr	r3, [pc, #212]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	2200      	movs	r2, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	617a      	str	r2, [r7, #20]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024ce:	f04f 0b00 	mov.w	fp, #0
 80024d2:	4652      	mov	r2, sl
 80024d4:	465b      	mov	r3, fp
 80024d6:	f04f 0000 	mov.w	r0, #0
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	0159      	lsls	r1, r3, #5
 80024e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024e4:	0150      	lsls	r0, r2, #5
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	ebb2 080a 	subs.w	r8, r2, sl
 80024ee:	eb63 090b 	sbc.w	r9, r3, fp
 80024f2:	f04f 0200 	mov.w	r2, #0
 80024f6:	f04f 0300 	mov.w	r3, #0
 80024fa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024fe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002502:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002506:	ebb2 0408 	subs.w	r4, r2, r8
 800250a:	eb63 0509 	sbc.w	r5, r3, r9
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	00eb      	lsls	r3, r5, #3
 8002518:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251c:	00e2      	lsls	r2, r4, #3
 800251e:	4614      	mov	r4, r2
 8002520:	461d      	mov	r5, r3
 8002522:	eb14 030a 	adds.w	r3, r4, sl
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	eb45 030b 	adc.w	r3, r5, fp
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253a:	4629      	mov	r1, r5
 800253c:	028b      	lsls	r3, r1, #10
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002544:	4621      	mov	r1, r4
 8002546:	028a      	lsls	r2, r1, #10
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800254e:	2200      	movs	r2, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	60fa      	str	r2, [r7, #12]
 8002554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002558:	f7fd fea2 	bl	80002a0 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002564:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_GetSysClockFreq+0x180>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_RCC_GetSysClockFreq+0x184>)
 8002582:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002588:	4618      	mov	r0, r3
 800258a:	3740      	adds	r7, #64	; 0x40
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	017d7840 	.word	0x017d7840

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	2000000c 	.word	0x2000000c

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	0800401c 	.word	0x0800401c

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffdc 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0b5b      	lsrs	r3, r3, #13
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	0800401c 	.word	0x0800401c

08002608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e03f      	b.n	800269a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d106      	bne.n	8002634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f7fe fcd4 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2224      	movs	r2, #36	; 0x24
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800264a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fc7b 	bl	8002f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	691a      	ldr	r2, [r3, #16]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2220      	movs	r2, #32
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2220      	movs	r2, #32
 8002694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b0ba      	sub	sp, #232	; 0xe8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80026e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d009      	beq.n	800270a <HAL_UART_IRQHandler+0x66>
 80026f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026fa:	f003 0320 	and.w	r3, r3, #32
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fb65 	bl	8002dd2 <UART_Receive_IT>
      return;
 8002708:	e256      	b.n	8002bb8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800270a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800270e:	2b00      	cmp	r3, #0
 8002710:	f000 80de 	beq.w	80028d0 <HAL_UART_IRQHandler+0x22c>
 8002714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002718:	f003 0301 	and.w	r3, r3, #1
 800271c:	2b00      	cmp	r3, #0
 800271e:	d106      	bne.n	800272e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002724:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80d1 	beq.w	80028d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800272e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_UART_IRQHandler+0xae>
 800273a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800273e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f043 0201 	orr.w	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00b      	beq.n	8002776 <HAL_UART_IRQHandler+0xd2>
 800275e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_UART_IRQHandler+0xf6>
 8002782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d005      	beq.n	800279a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002792:	f043 0204 	orr.w	r2, r3, #4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800279a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d011      	beq.n	80027ca <HAL_UART_IRQHandler+0x126>
 80027a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f043 0208 	orr.w	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f000 81ed 	beq.w	8002bae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d8:	f003 0320 	and.w	r3, r3, #32
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_UART_IRQHandler+0x14e>
 80027e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027e4:	f003 0320 	and.w	r3, r3, #32
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d002      	beq.n	80027f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 faf0 	bl	8002dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027fc:	2b40      	cmp	r3, #64	; 0x40
 80027fe:	bf0c      	ite	eq
 8002800:	2301      	moveq	r3, #1
 8002802:	2300      	movne	r3, #0
 8002804:	b2db      	uxtb	r3, r3
 8002806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <HAL_UART_IRQHandler+0x17a>
 8002816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800281a:	2b00      	cmp	r3, #0
 800281c:	d04f      	beq.n	80028be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f9f8 	bl	8002c14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695b      	ldr	r3, [r3, #20]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d141      	bne.n	80028b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3314      	adds	r3, #20
 8002838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800284c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800285e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800286a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800286e:	e841 2300 	strex	r3, r2, [r1]
 8002872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1d9      	bne.n	8002832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	2b00      	cmp	r3, #0
 8002884:	d013      	beq.n	80028ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	4a7d      	ldr	r2, [pc, #500]	; (8002a80 <HAL_UART_IRQHandler+0x3dc>)
 800288c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f85f 	bl	8001956 <HAL_DMA_Abort_IT>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d016      	beq.n	80028cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028a8:	4610      	mov	r0, r2
 80028aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ac:	e00e      	b.n	80028cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 f99a 	bl	8002be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b4:	e00a      	b.n	80028cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f996 	bl	8002be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028bc:	e006      	b.n	80028cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f992 	bl	8002be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80028ca:	e170      	b.n	8002bae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028cc:	bf00      	nop
    return;
 80028ce:	e16e      	b.n	8002bae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	f040 814a 	bne.w	8002b6e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8143 	beq.w	8002b6e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80028e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 813c 	beq.w	8002b6e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002916:	2b40      	cmp	r3, #64	; 0x40
 8002918:	f040 80b4 	bne.w	8002a84 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8140 	beq.w	8002bb2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800293a:	429a      	cmp	r2, r3
 800293c:	f080 8139 	bcs.w	8002bb2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002946:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002952:	f000 8088 	beq.w	8002a66 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	330c      	adds	r3, #12
 800295c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002960:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002964:	e853 3f00 	ldrex	r3, [r3]
 8002968:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800296c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002970:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002974:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	330c      	adds	r3, #12
 800297e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002986:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800298e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800299a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1d9      	bne.n	8002956 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	3314      	adds	r3, #20
 80029a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ac:	e853 3f00 	ldrex	r3, [r3]
 80029b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80029b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029b4:	f023 0301 	bic.w	r3, r3, #1
 80029b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3314      	adds	r3, #20
 80029c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80029c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80029ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80029ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029d2:	e841 2300 	strex	r3, r2, [r1]
 80029d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80029d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1e1      	bne.n	80029a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3314      	adds	r3, #20
 80029e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029e8:	e853 3f00 	ldrex	r3, [r3]
 80029ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80029ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a0a:	e841 2300 	strex	r3, r2, [r1]
 8002a0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1e3      	bne.n	80029de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a2e:	e853 3f00 	ldrex	r3, [r3]
 8002a32:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002a34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a36:	f023 0310 	bic.w	r3, r3, #16
 8002a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002a48:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a4a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002a4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a50:	e841 2300 	strex	r3, r2, [r1]
 8002a54:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1e3      	bne.n	8002a24 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe ff08 	bl	8001876 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f8c0 	bl	8002bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a7c:	e099      	b.n	8002bb2 <HAL_UART_IRQHandler+0x50e>
 8002a7e:	bf00      	nop
 8002a80:	08002cdb 	.word	0x08002cdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 808b 	beq.w	8002bb6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8086 	beq.w	8002bb6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	330c      	adds	r3, #12
 8002ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab4:	e853 3f00 	ldrex	r3, [r3]
 8002ab8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ac0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	330c      	adds	r3, #12
 8002aca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002ace:	647a      	str	r2, [r7, #68]	; 0x44
 8002ad0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ad4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ad6:	e841 2300 	strex	r3, r2, [r1]
 8002ada:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002adc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e3      	bne.n	8002aaa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	3314      	adds	r3, #20
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	e853 3f00 	ldrex	r3, [r3]
 8002af0:	623b      	str	r3, [r7, #32]
   return(result);
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f023 0301 	bic.w	r3, r3, #1
 8002af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3314      	adds	r3, #20
 8002b02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b06:	633a      	str	r2, [r7, #48]	; 0x30
 8002b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0e:	e841 2300 	strex	r3, r2, [r1]
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1e3      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	330c      	adds	r3, #12
 8002b2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	e853 3f00 	ldrex	r3, [r3]
 8002b36:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0310 	bic.w	r3, r3, #16
 8002b3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002b4c:	61fa      	str	r2, [r7, #28]
 8002b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	69b9      	ldr	r1, [r7, #24]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	617b      	str	r3, [r7, #20]
   return(result);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e3      	bne.n	8002b28 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f848 	bl	8002bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b6c:	e023      	b.n	8002bb6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_UART_IRQHandler+0x4ea>
 8002b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8bb 	bl	8002d02 <UART_Transmit_IT>
    return;
 8002b8c:	e014      	b.n	8002bb8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00e      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x514>
 8002b9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d008      	beq.n	8002bb8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f8fb 	bl	8002da2 <UART_EndTransmit_IT>
    return;
 8002bac:	e004      	b.n	8002bb8 <HAL_UART_IRQHandler+0x514>
    return;
 8002bae:	bf00      	nop
 8002bb0:	e002      	b.n	8002bb8 <HAL_UART_IRQHandler+0x514>
      return;
 8002bb2:	bf00      	nop
 8002bb4:	e000      	b.n	8002bb8 <HAL_UART_IRQHandler+0x514>
      return;
 8002bb6:	bf00      	nop
  }
}
 8002bb8:	37e8      	adds	r7, #232	; 0xe8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop

08002bc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b095      	sub	sp, #84	; 0x54
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	330c      	adds	r3, #12
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	330c      	adds	r3, #12
 8002c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c3c:	643a      	str	r2, [r7, #64]	; 0x40
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c44:	e841 2300 	strex	r3, r2, [r1]
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1e5      	bne.n	8002c1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	3314      	adds	r3, #20
 8002c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c78:	e841 2300 	strex	r3, r2, [r1]
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e5      	bne.n	8002c50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d119      	bne.n	8002cc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	330c      	adds	r3, #12
 8002c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	e853 3f00 	ldrex	r3, [r3]
 8002c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	f023 0310 	bic.w	r3, r3, #16
 8002ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	330c      	adds	r3, #12
 8002caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cac:	61ba      	str	r2, [r7, #24]
 8002cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cb0:	6979      	ldr	r1, [r7, #20]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	e841 2300 	strex	r3, r2, [r1]
 8002cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1e5      	bne.n	8002c8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002cce:	bf00      	nop
 8002cd0:	3754      	adds	r7, #84	; 0x54
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b084      	sub	sp, #16
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f7ff ff77 	bl	8002be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b21      	cmp	r3, #33	; 0x21
 8002d14:	d13e      	bne.n	8002d94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1e:	d114      	bne.n	8002d4a <UART_Transmit_IT+0x48>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d110      	bne.n	8002d4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	881b      	ldrh	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	1c9a      	adds	r2, r3, #2
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	621a      	str	r2, [r3, #32]
 8002d48:	e008      	b.n	8002d5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	1c59      	adds	r1, r3, #1
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6211      	str	r1, [r2, #32]
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10f      	bne.n	8002d90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fefc 	bl	8002bc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b08c      	sub	sp, #48	; 0x30
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b22      	cmp	r3, #34	; 0x22
 8002de4:	f040 80ab 	bne.w	8002f3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df0:	d117      	bne.n	8002e22 <UART_Receive_IT+0x50>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d113      	bne.n	8002e22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1a:	1c9a      	adds	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e20:	e026      	b.n	8002e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e34:	d007      	beq.n	8002e46 <UART_Receive_IT+0x74>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10a      	bne.n	8002e54 <UART_Receive_IT+0x82>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d106      	bne.n	8002e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	e008      	b.n	8002e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d15a      	bne.n	8002f3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0220 	bic.w	r2, r2, #32
 8002e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695a      	ldr	r2, [r3, #20]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0201 	bic.w	r2, r2, #1
 8002eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d135      	bne.n	8002f30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	330c      	adds	r3, #12
 8002ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	e853 3f00 	ldrex	r3, [r3]
 8002ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f023 0310 	bic.w	r3, r3, #16
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	330c      	adds	r3, #12
 8002ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eea:	623a      	str	r2, [r7, #32]
 8002eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	69f9      	ldr	r1, [r7, #28]
 8002ef0:	6a3a      	ldr	r2, [r7, #32]
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e5      	bne.n	8002eca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d10a      	bne.n	8002f22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f26:	4619      	mov	r1, r3
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff fe67 	bl	8002bfc <HAL_UARTEx_RxEventCallback>
 8002f2e:	e002      	b.n	8002f36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff fe4f 	bl	8002bd4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e002      	b.n	8002f40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
  }
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3730      	adds	r7, #48	; 0x30
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f4c:	b0c0      	sub	sp, #256	; 0x100
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f64:	68d9      	ldr	r1, [r3, #12]
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	ea40 0301 	orr.w	r3, r0, r1
 8002f70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fa0:	f021 010c 	bic.w	r1, r1, #12
 8002fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fae:	430b      	orrs	r3, r1
 8002fb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc2:	6999      	ldr	r1, [r3, #24]
 8002fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	ea40 0301 	orr.w	r3, r0, r1
 8002fce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	4b8f      	ldr	r3, [pc, #572]	; (8003214 <UART_SetConfig+0x2cc>)
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d005      	beq.n	8002fe8 <UART_SetConfig+0xa0>
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4b8d      	ldr	r3, [pc, #564]	; (8003218 <UART_SetConfig+0x2d0>)
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d104      	bne.n	8002ff2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fe8:	f7ff fafa 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 8002fec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002ff0:	e003      	b.n	8002ffa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ff2:	f7ff fae1 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8002ff6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003004:	f040 810c 	bne.w	8003220 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300c:	2200      	movs	r2, #0
 800300e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003012:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003016:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800301a:	4622      	mov	r2, r4
 800301c:	462b      	mov	r3, r5
 800301e:	1891      	adds	r1, r2, r2
 8003020:	65b9      	str	r1, [r7, #88]	; 0x58
 8003022:	415b      	adcs	r3, r3
 8003024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003026:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800302a:	4621      	mov	r1, r4
 800302c:	eb12 0801 	adds.w	r8, r2, r1
 8003030:	4629      	mov	r1, r5
 8003032:	eb43 0901 	adc.w	r9, r3, r1
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800304a:	4690      	mov	r8, r2
 800304c:	4699      	mov	r9, r3
 800304e:	4623      	mov	r3, r4
 8003050:	eb18 0303 	adds.w	r3, r8, r3
 8003054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003058:	462b      	mov	r3, r5
 800305a:	eb49 0303 	adc.w	r3, r9, r3
 800305e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800306e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003072:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003076:	460b      	mov	r3, r1
 8003078:	18db      	adds	r3, r3, r3
 800307a:	653b      	str	r3, [r7, #80]	; 0x50
 800307c:	4613      	mov	r3, r2
 800307e:	eb42 0303 	adc.w	r3, r2, r3
 8003082:	657b      	str	r3, [r7, #84]	; 0x54
 8003084:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003088:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800308c:	f7fd f908 	bl	80002a0 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4b61      	ldr	r3, [pc, #388]	; (800321c <UART_SetConfig+0x2d4>)
 8003096:	fba3 2302 	umull	r2, r3, r3, r2
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	011c      	lsls	r4, r3, #4
 800309e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030a2:	2200      	movs	r2, #0
 80030a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030b0:	4642      	mov	r2, r8
 80030b2:	464b      	mov	r3, r9
 80030b4:	1891      	adds	r1, r2, r2
 80030b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80030b8:	415b      	adcs	r3, r3
 80030ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030c0:	4641      	mov	r1, r8
 80030c2:	eb12 0a01 	adds.w	sl, r2, r1
 80030c6:	4649      	mov	r1, r9
 80030c8:	eb43 0b01 	adc.w	fp, r3, r1
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80030d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80030dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030e0:	4692      	mov	sl, r2
 80030e2:	469b      	mov	fp, r3
 80030e4:	4643      	mov	r3, r8
 80030e6:	eb1a 0303 	adds.w	r3, sl, r3
 80030ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030ee:	464b      	mov	r3, r9
 80030f0:	eb4b 0303 	adc.w	r3, fp, r3
 80030f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80030f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003104:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003108:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800310c:	460b      	mov	r3, r1
 800310e:	18db      	adds	r3, r3, r3
 8003110:	643b      	str	r3, [r7, #64]	; 0x40
 8003112:	4613      	mov	r3, r2
 8003114:	eb42 0303 	adc.w	r3, r2, r3
 8003118:	647b      	str	r3, [r7, #68]	; 0x44
 800311a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800311e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003122:	f7fd f8bd 	bl	80002a0 <__aeabi_uldivmod>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	4611      	mov	r1, r2
 800312c:	4b3b      	ldr	r3, [pc, #236]	; (800321c <UART_SetConfig+0x2d4>)
 800312e:	fba3 2301 	umull	r2, r3, r3, r1
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	2264      	movs	r2, #100	; 0x64
 8003136:	fb02 f303 	mul.w	r3, r2, r3
 800313a:	1acb      	subs	r3, r1, r3
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003142:	4b36      	ldr	r3, [pc, #216]	; (800321c <UART_SetConfig+0x2d4>)
 8003144:	fba3 2302 	umull	r2, r3, r3, r2
 8003148:	095b      	lsrs	r3, r3, #5
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003150:	441c      	add	r4, r3
 8003152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800315c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003160:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003164:	4642      	mov	r2, r8
 8003166:	464b      	mov	r3, r9
 8003168:	1891      	adds	r1, r2, r2
 800316a:	63b9      	str	r1, [r7, #56]	; 0x38
 800316c:	415b      	adcs	r3, r3
 800316e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003174:	4641      	mov	r1, r8
 8003176:	1851      	adds	r1, r2, r1
 8003178:	6339      	str	r1, [r7, #48]	; 0x30
 800317a:	4649      	mov	r1, r9
 800317c:	414b      	adcs	r3, r1
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800318c:	4659      	mov	r1, fp
 800318e:	00cb      	lsls	r3, r1, #3
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003196:	4651      	mov	r1, sl
 8003198:	00ca      	lsls	r2, r1, #3
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	4642      	mov	r2, r8
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031a8:	464b      	mov	r3, r9
 80031aa:	460a      	mov	r2, r1
 80031ac:	eb42 0303 	adc.w	r3, r2, r3
 80031b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80031c8:	460b      	mov	r3, r1
 80031ca:	18db      	adds	r3, r3, r3
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ce:	4613      	mov	r3, r2
 80031d0:	eb42 0303 	adc.w	r3, r2, r3
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80031da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80031de:	f7fd f85f 	bl	80002a0 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <UART_SetConfig+0x2d4>)
 80031e8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	2164      	movs	r1, #100	; 0x64
 80031f0:	fb01 f303 	mul.w	r3, r1, r3
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	3332      	adds	r3, #50	; 0x32
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <UART_SetConfig+0x2d4>)
 80031fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003200:	095b      	lsrs	r3, r3, #5
 8003202:	f003 0207 	and.w	r2, r3, #7
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4422      	add	r2, r4
 800320e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003210:	e105      	b.n	800341e <UART_SetConfig+0x4d6>
 8003212:	bf00      	nop
 8003214:	40011000 	.word	0x40011000
 8003218:	40011400 	.word	0x40011400
 800321c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003224:	2200      	movs	r2, #0
 8003226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800322a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800322e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003232:	4642      	mov	r2, r8
 8003234:	464b      	mov	r3, r9
 8003236:	1891      	adds	r1, r2, r2
 8003238:	6239      	str	r1, [r7, #32]
 800323a:	415b      	adcs	r3, r3
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
 800323e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003242:	4641      	mov	r1, r8
 8003244:	1854      	adds	r4, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb43 0501 	adc.w	r5, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	00eb      	lsls	r3, r5, #3
 8003256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800325a:	00e2      	lsls	r2, r4, #3
 800325c:	4614      	mov	r4, r2
 800325e:	461d      	mov	r5, r3
 8003260:	4643      	mov	r3, r8
 8003262:	18e3      	adds	r3, r4, r3
 8003264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003268:	464b      	mov	r3, r9
 800326a:	eb45 0303 	adc.w	r3, r5, r3
 800326e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800327e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800328e:	4629      	mov	r1, r5
 8003290:	008b      	lsls	r3, r1, #2
 8003292:	4621      	mov	r1, r4
 8003294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003298:	4621      	mov	r1, r4
 800329a:	008a      	lsls	r2, r1, #2
 800329c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032a0:	f7fc fffe 	bl	80002a0 <__aeabi_uldivmod>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4b60      	ldr	r3, [pc, #384]	; (800342c <UART_SetConfig+0x4e4>)
 80032aa:	fba3 2302 	umull	r2, r3, r3, r2
 80032ae:	095b      	lsrs	r3, r3, #5
 80032b0:	011c      	lsls	r4, r3, #4
 80032b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032b6:	2200      	movs	r2, #0
 80032b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032c4:	4642      	mov	r2, r8
 80032c6:	464b      	mov	r3, r9
 80032c8:	1891      	adds	r1, r2, r2
 80032ca:	61b9      	str	r1, [r7, #24]
 80032cc:	415b      	adcs	r3, r3
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d4:	4641      	mov	r1, r8
 80032d6:	1851      	adds	r1, r2, r1
 80032d8:	6139      	str	r1, [r7, #16]
 80032da:	4649      	mov	r1, r9
 80032dc:	414b      	adcs	r3, r1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032ec:	4659      	mov	r1, fp
 80032ee:	00cb      	lsls	r3, r1, #3
 80032f0:	4651      	mov	r1, sl
 80032f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032f6:	4651      	mov	r1, sl
 80032f8:	00ca      	lsls	r2, r1, #3
 80032fa:	4610      	mov	r0, r2
 80032fc:	4619      	mov	r1, r3
 80032fe:	4603      	mov	r3, r0
 8003300:	4642      	mov	r2, r8
 8003302:	189b      	adds	r3, r3, r2
 8003304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003308:	464b      	mov	r3, r9
 800330a:	460a      	mov	r2, r1
 800330c:	eb42 0303 	adc.w	r3, r2, r3
 8003310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	67bb      	str	r3, [r7, #120]	; 0x78
 800331e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800332c:	4649      	mov	r1, r9
 800332e:	008b      	lsls	r3, r1, #2
 8003330:	4641      	mov	r1, r8
 8003332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003336:	4641      	mov	r1, r8
 8003338:	008a      	lsls	r2, r1, #2
 800333a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800333e:	f7fc ffaf 	bl	80002a0 <__aeabi_uldivmod>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4b39      	ldr	r3, [pc, #228]	; (800342c <UART_SetConfig+0x4e4>)
 8003348:	fba3 1302 	umull	r1, r3, r3, r2
 800334c:	095b      	lsrs	r3, r3, #5
 800334e:	2164      	movs	r1, #100	; 0x64
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	3332      	adds	r3, #50	; 0x32
 800335a:	4a34      	ldr	r2, [pc, #208]	; (800342c <UART_SetConfig+0x4e4>)
 800335c:	fba2 2303 	umull	r2, r3, r2, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003366:	441c      	add	r4, r3
 8003368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800336c:	2200      	movs	r2, #0
 800336e:	673b      	str	r3, [r7, #112]	; 0x70
 8003370:	677a      	str	r2, [r7, #116]	; 0x74
 8003372:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003376:	4642      	mov	r2, r8
 8003378:	464b      	mov	r3, r9
 800337a:	1891      	adds	r1, r2, r2
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	415b      	adcs	r3, r3
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003386:	4641      	mov	r1, r8
 8003388:	1851      	adds	r1, r2, r1
 800338a:	6039      	str	r1, [r7, #0]
 800338c:	4649      	mov	r1, r9
 800338e:	414b      	adcs	r3, r1
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800339e:	4659      	mov	r1, fp
 80033a0:	00cb      	lsls	r3, r1, #3
 80033a2:	4651      	mov	r1, sl
 80033a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033a8:	4651      	mov	r1, sl
 80033aa:	00ca      	lsls	r2, r1, #3
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	4603      	mov	r3, r0
 80033b2:	4642      	mov	r2, r8
 80033b4:	189b      	adds	r3, r3, r2
 80033b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80033b8:	464b      	mov	r3, r9
 80033ba:	460a      	mov	r2, r1
 80033bc:	eb42 0303 	adc.w	r3, r2, r3
 80033c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	663b      	str	r3, [r7, #96]	; 0x60
 80033cc:	667a      	str	r2, [r7, #100]	; 0x64
 80033ce:	f04f 0200 	mov.w	r2, #0
 80033d2:	f04f 0300 	mov.w	r3, #0
 80033d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80033da:	4649      	mov	r1, r9
 80033dc:	008b      	lsls	r3, r1, #2
 80033de:	4641      	mov	r1, r8
 80033e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033e4:	4641      	mov	r1, r8
 80033e6:	008a      	lsls	r2, r1, #2
 80033e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80033ec:	f7fc ff58 	bl	80002a0 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4b0d      	ldr	r3, [pc, #52]	; (800342c <UART_SetConfig+0x4e4>)
 80033f6:	fba3 1302 	umull	r1, r3, r3, r2
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2164      	movs	r1, #100	; 0x64
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	3332      	adds	r3, #50	; 0x32
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <UART_SetConfig+0x4e4>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	095b      	lsrs	r3, r3, #5
 8003410:	f003 020f 	and.w	r2, r3, #15
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4422      	add	r2, r4
 800341c:	609a      	str	r2, [r3, #8]
}
 800341e:	bf00      	nop
 8003420:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003424:	46bd      	mov	sp, r7
 8003426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800342a:	bf00      	nop
 800342c:	51eb851f 	.word	0x51eb851f

08003430 <atoi>:
 8003430:	220a      	movs	r2, #10
 8003432:	2100      	movs	r1, #0
 8003434:	f000 b90a 	b.w	800364c <strtol>

08003438 <__errno>:
 8003438:	4b01      	ldr	r3, [pc, #4]	; (8003440 <__errno+0x8>)
 800343a:	6818      	ldr	r0, [r3, #0]
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	2000001c 	.word	0x2000001c

08003444 <__libc_init_array>:
 8003444:	b570      	push	{r4, r5, r6, lr}
 8003446:	4d0d      	ldr	r5, [pc, #52]	; (800347c <__libc_init_array+0x38>)
 8003448:	4c0d      	ldr	r4, [pc, #52]	; (8003480 <__libc_init_array+0x3c>)
 800344a:	1b64      	subs	r4, r4, r5
 800344c:	10a4      	asrs	r4, r4, #2
 800344e:	2600      	movs	r6, #0
 8003450:	42a6      	cmp	r6, r4
 8003452:	d109      	bne.n	8003468 <__libc_init_array+0x24>
 8003454:	4d0b      	ldr	r5, [pc, #44]	; (8003484 <__libc_init_array+0x40>)
 8003456:	4c0c      	ldr	r4, [pc, #48]	; (8003488 <__libc_init_array+0x44>)
 8003458:	f000 fd42 	bl	8003ee0 <_init>
 800345c:	1b64      	subs	r4, r4, r5
 800345e:	10a4      	asrs	r4, r4, #2
 8003460:	2600      	movs	r6, #0
 8003462:	42a6      	cmp	r6, r4
 8003464:	d105      	bne.n	8003472 <__libc_init_array+0x2e>
 8003466:	bd70      	pop	{r4, r5, r6, pc}
 8003468:	f855 3b04 	ldr.w	r3, [r5], #4
 800346c:	4798      	blx	r3
 800346e:	3601      	adds	r6, #1
 8003470:	e7ee      	b.n	8003450 <__libc_init_array+0xc>
 8003472:	f855 3b04 	ldr.w	r3, [r5], #4
 8003476:	4798      	blx	r3
 8003478:	3601      	adds	r6, #1
 800347a:	e7f2      	b.n	8003462 <__libc_init_array+0x1e>
 800347c:	08004160 	.word	0x08004160
 8003480:	08004160 	.word	0x08004160
 8003484:	08004160 	.word	0x08004160
 8003488:	08004164 	.word	0x08004164

0800348c <memcpy>:
 800348c:	440a      	add	r2, r1
 800348e:	4291      	cmp	r1, r2
 8003490:	f100 33ff 	add.w	r3, r0, #4294967295
 8003494:	d100      	bne.n	8003498 <memcpy+0xc>
 8003496:	4770      	bx	lr
 8003498:	b510      	push	{r4, lr}
 800349a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800349e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80034a2:	4291      	cmp	r1, r2
 80034a4:	d1f9      	bne.n	800349a <memcpy+0xe>
 80034a6:	bd10      	pop	{r4, pc}

080034a8 <memset>:
 80034a8:	4402      	add	r2, r0
 80034aa:	4603      	mov	r3, r0
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d100      	bne.n	80034b2 <memset+0xa>
 80034b0:	4770      	bx	lr
 80034b2:	f803 1b01 	strb.w	r1, [r3], #1
 80034b6:	e7f9      	b.n	80034ac <memset+0x4>

080034b8 <sniprintf>:
 80034b8:	b40c      	push	{r2, r3}
 80034ba:	b530      	push	{r4, r5, lr}
 80034bc:	4b17      	ldr	r3, [pc, #92]	; (800351c <sniprintf+0x64>)
 80034be:	1e0c      	subs	r4, r1, #0
 80034c0:	681d      	ldr	r5, [r3, #0]
 80034c2:	b09d      	sub	sp, #116	; 0x74
 80034c4:	da08      	bge.n	80034d8 <sniprintf+0x20>
 80034c6:	238b      	movs	r3, #139	; 0x8b
 80034c8:	602b      	str	r3, [r5, #0]
 80034ca:	f04f 30ff 	mov.w	r0, #4294967295
 80034ce:	b01d      	add	sp, #116	; 0x74
 80034d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80034d4:	b002      	add	sp, #8
 80034d6:	4770      	bx	lr
 80034d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80034dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80034e0:	bf14      	ite	ne
 80034e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80034e6:	4623      	moveq	r3, r4
 80034e8:	9304      	str	r3, [sp, #16]
 80034ea:	9307      	str	r3, [sp, #28]
 80034ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80034f0:	9002      	str	r0, [sp, #8]
 80034f2:	9006      	str	r0, [sp, #24]
 80034f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80034f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80034fa:	ab21      	add	r3, sp, #132	; 0x84
 80034fc:	a902      	add	r1, sp, #8
 80034fe:	4628      	mov	r0, r5
 8003500:	9301      	str	r3, [sp, #4]
 8003502:	f000 f909 	bl	8003718 <_svfiprintf_r>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	bfbc      	itt	lt
 800350a:	238b      	movlt	r3, #139	; 0x8b
 800350c:	602b      	strlt	r3, [r5, #0]
 800350e:	2c00      	cmp	r4, #0
 8003510:	d0dd      	beq.n	80034ce <sniprintf+0x16>
 8003512:	9b02      	ldr	r3, [sp, #8]
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e7d9      	b.n	80034ce <sniprintf+0x16>
 800351a:	bf00      	nop
 800351c:	2000001c 	.word	0x2000001c

08003520 <strncmp>:
 8003520:	b510      	push	{r4, lr}
 8003522:	b17a      	cbz	r2, 8003544 <strncmp+0x24>
 8003524:	4603      	mov	r3, r0
 8003526:	3901      	subs	r1, #1
 8003528:	1884      	adds	r4, r0, r2
 800352a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800352e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003532:	4290      	cmp	r0, r2
 8003534:	d101      	bne.n	800353a <strncmp+0x1a>
 8003536:	42a3      	cmp	r3, r4
 8003538:	d101      	bne.n	800353e <strncmp+0x1e>
 800353a:	1a80      	subs	r0, r0, r2
 800353c:	bd10      	pop	{r4, pc}
 800353e:	2800      	cmp	r0, #0
 8003540:	d1f3      	bne.n	800352a <strncmp+0xa>
 8003542:	e7fa      	b.n	800353a <strncmp+0x1a>
 8003544:	4610      	mov	r0, r2
 8003546:	e7f9      	b.n	800353c <strncmp+0x1c>

08003548 <_strtol_l.constprop.0>:
 8003548:	2b01      	cmp	r3, #1
 800354a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800354e:	d001      	beq.n	8003554 <_strtol_l.constprop.0+0xc>
 8003550:	2b24      	cmp	r3, #36	; 0x24
 8003552:	d906      	bls.n	8003562 <_strtol_l.constprop.0+0x1a>
 8003554:	f7ff ff70 	bl	8003438 <__errno>
 8003558:	2316      	movs	r3, #22
 800355a:	6003      	str	r3, [r0, #0]
 800355c:	2000      	movs	r0, #0
 800355e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003562:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003648 <_strtol_l.constprop.0+0x100>
 8003566:	460d      	mov	r5, r1
 8003568:	462e      	mov	r6, r5
 800356a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800356e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003572:	f017 0708 	ands.w	r7, r7, #8
 8003576:	d1f7      	bne.n	8003568 <_strtol_l.constprop.0+0x20>
 8003578:	2c2d      	cmp	r4, #45	; 0x2d
 800357a:	d132      	bne.n	80035e2 <_strtol_l.constprop.0+0x9a>
 800357c:	782c      	ldrb	r4, [r5, #0]
 800357e:	2701      	movs	r7, #1
 8003580:	1cb5      	adds	r5, r6, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d05b      	beq.n	800363e <_strtol_l.constprop.0+0xf6>
 8003586:	2b10      	cmp	r3, #16
 8003588:	d109      	bne.n	800359e <_strtol_l.constprop.0+0x56>
 800358a:	2c30      	cmp	r4, #48	; 0x30
 800358c:	d107      	bne.n	800359e <_strtol_l.constprop.0+0x56>
 800358e:	782c      	ldrb	r4, [r5, #0]
 8003590:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003594:	2c58      	cmp	r4, #88	; 0x58
 8003596:	d14d      	bne.n	8003634 <_strtol_l.constprop.0+0xec>
 8003598:	786c      	ldrb	r4, [r5, #1]
 800359a:	2310      	movs	r3, #16
 800359c:	3502      	adds	r5, #2
 800359e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80035a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80035a6:	f04f 0c00 	mov.w	ip, #0
 80035aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80035ae:	4666      	mov	r6, ip
 80035b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80035b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80035b8:	f1be 0f09 	cmp.w	lr, #9
 80035bc:	d816      	bhi.n	80035ec <_strtol_l.constprop.0+0xa4>
 80035be:	4674      	mov	r4, lr
 80035c0:	42a3      	cmp	r3, r4
 80035c2:	dd24      	ble.n	800360e <_strtol_l.constprop.0+0xc6>
 80035c4:	f1bc 0f00 	cmp.w	ip, #0
 80035c8:	db1e      	blt.n	8003608 <_strtol_l.constprop.0+0xc0>
 80035ca:	45b1      	cmp	r9, r6
 80035cc:	d31c      	bcc.n	8003608 <_strtol_l.constprop.0+0xc0>
 80035ce:	d101      	bne.n	80035d4 <_strtol_l.constprop.0+0x8c>
 80035d0:	45a2      	cmp	sl, r4
 80035d2:	db19      	blt.n	8003608 <_strtol_l.constprop.0+0xc0>
 80035d4:	fb06 4603 	mla	r6, r6, r3, r4
 80035d8:	f04f 0c01 	mov.w	ip, #1
 80035dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035e0:	e7e8      	b.n	80035b4 <_strtol_l.constprop.0+0x6c>
 80035e2:	2c2b      	cmp	r4, #43	; 0x2b
 80035e4:	bf04      	itt	eq
 80035e6:	782c      	ldrbeq	r4, [r5, #0]
 80035e8:	1cb5      	addeq	r5, r6, #2
 80035ea:	e7ca      	b.n	8003582 <_strtol_l.constprop.0+0x3a>
 80035ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80035f0:	f1be 0f19 	cmp.w	lr, #25
 80035f4:	d801      	bhi.n	80035fa <_strtol_l.constprop.0+0xb2>
 80035f6:	3c37      	subs	r4, #55	; 0x37
 80035f8:	e7e2      	b.n	80035c0 <_strtol_l.constprop.0+0x78>
 80035fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80035fe:	f1be 0f19 	cmp.w	lr, #25
 8003602:	d804      	bhi.n	800360e <_strtol_l.constprop.0+0xc6>
 8003604:	3c57      	subs	r4, #87	; 0x57
 8003606:	e7db      	b.n	80035c0 <_strtol_l.constprop.0+0x78>
 8003608:	f04f 3cff 	mov.w	ip, #4294967295
 800360c:	e7e6      	b.n	80035dc <_strtol_l.constprop.0+0x94>
 800360e:	f1bc 0f00 	cmp.w	ip, #0
 8003612:	da05      	bge.n	8003620 <_strtol_l.constprop.0+0xd8>
 8003614:	2322      	movs	r3, #34	; 0x22
 8003616:	6003      	str	r3, [r0, #0]
 8003618:	4646      	mov	r6, r8
 800361a:	b942      	cbnz	r2, 800362e <_strtol_l.constprop.0+0xe6>
 800361c:	4630      	mov	r0, r6
 800361e:	e79e      	b.n	800355e <_strtol_l.constprop.0+0x16>
 8003620:	b107      	cbz	r7, 8003624 <_strtol_l.constprop.0+0xdc>
 8003622:	4276      	negs	r6, r6
 8003624:	2a00      	cmp	r2, #0
 8003626:	d0f9      	beq.n	800361c <_strtol_l.constprop.0+0xd4>
 8003628:	f1bc 0f00 	cmp.w	ip, #0
 800362c:	d000      	beq.n	8003630 <_strtol_l.constprop.0+0xe8>
 800362e:	1e69      	subs	r1, r5, #1
 8003630:	6011      	str	r1, [r2, #0]
 8003632:	e7f3      	b.n	800361c <_strtol_l.constprop.0+0xd4>
 8003634:	2430      	movs	r4, #48	; 0x30
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1b1      	bne.n	800359e <_strtol_l.constprop.0+0x56>
 800363a:	2308      	movs	r3, #8
 800363c:	e7af      	b.n	800359e <_strtol_l.constprop.0+0x56>
 800363e:	2c30      	cmp	r4, #48	; 0x30
 8003640:	d0a5      	beq.n	800358e <_strtol_l.constprop.0+0x46>
 8003642:	230a      	movs	r3, #10
 8003644:	e7ab      	b.n	800359e <_strtol_l.constprop.0+0x56>
 8003646:	bf00      	nop
 8003648:	08004025 	.word	0x08004025

0800364c <strtol>:
 800364c:	4613      	mov	r3, r2
 800364e:	460a      	mov	r2, r1
 8003650:	4601      	mov	r1, r0
 8003652:	4802      	ldr	r0, [pc, #8]	; (800365c <strtol+0x10>)
 8003654:	6800      	ldr	r0, [r0, #0]
 8003656:	f7ff bf77 	b.w	8003548 <_strtol_l.constprop.0>
 800365a:	bf00      	nop
 800365c:	2000001c 	.word	0x2000001c

08003660 <__ssputs_r>:
 8003660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003664:	688e      	ldr	r6, [r1, #8]
 8003666:	429e      	cmp	r6, r3
 8003668:	4682      	mov	sl, r0
 800366a:	460c      	mov	r4, r1
 800366c:	4690      	mov	r8, r2
 800366e:	461f      	mov	r7, r3
 8003670:	d838      	bhi.n	80036e4 <__ssputs_r+0x84>
 8003672:	898a      	ldrh	r2, [r1, #12]
 8003674:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003678:	d032      	beq.n	80036e0 <__ssputs_r+0x80>
 800367a:	6825      	ldr	r5, [r4, #0]
 800367c:	6909      	ldr	r1, [r1, #16]
 800367e:	eba5 0901 	sub.w	r9, r5, r1
 8003682:	6965      	ldr	r5, [r4, #20]
 8003684:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003688:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800368c:	3301      	adds	r3, #1
 800368e:	444b      	add	r3, r9
 8003690:	106d      	asrs	r5, r5, #1
 8003692:	429d      	cmp	r5, r3
 8003694:	bf38      	it	cc
 8003696:	461d      	movcc	r5, r3
 8003698:	0553      	lsls	r3, r2, #21
 800369a:	d531      	bpl.n	8003700 <__ssputs_r+0xa0>
 800369c:	4629      	mov	r1, r5
 800369e:	f000 fb55 	bl	8003d4c <_malloc_r>
 80036a2:	4606      	mov	r6, r0
 80036a4:	b950      	cbnz	r0, 80036bc <__ssputs_r+0x5c>
 80036a6:	230c      	movs	r3, #12
 80036a8:	f8ca 3000 	str.w	r3, [sl]
 80036ac:	89a3      	ldrh	r3, [r4, #12]
 80036ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b2:	81a3      	strh	r3, [r4, #12]
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	6921      	ldr	r1, [r4, #16]
 80036be:	464a      	mov	r2, r9
 80036c0:	f7ff fee4 	bl	800348c <memcpy>
 80036c4:	89a3      	ldrh	r3, [r4, #12]
 80036c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80036ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ce:	81a3      	strh	r3, [r4, #12]
 80036d0:	6126      	str	r6, [r4, #16]
 80036d2:	6165      	str	r5, [r4, #20]
 80036d4:	444e      	add	r6, r9
 80036d6:	eba5 0509 	sub.w	r5, r5, r9
 80036da:	6026      	str	r6, [r4, #0]
 80036dc:	60a5      	str	r5, [r4, #8]
 80036de:	463e      	mov	r6, r7
 80036e0:	42be      	cmp	r6, r7
 80036e2:	d900      	bls.n	80036e6 <__ssputs_r+0x86>
 80036e4:	463e      	mov	r6, r7
 80036e6:	6820      	ldr	r0, [r4, #0]
 80036e8:	4632      	mov	r2, r6
 80036ea:	4641      	mov	r1, r8
 80036ec:	f000 faa8 	bl	8003c40 <memmove>
 80036f0:	68a3      	ldr	r3, [r4, #8]
 80036f2:	1b9b      	subs	r3, r3, r6
 80036f4:	60a3      	str	r3, [r4, #8]
 80036f6:	6823      	ldr	r3, [r4, #0]
 80036f8:	4433      	add	r3, r6
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	2000      	movs	r0, #0
 80036fe:	e7db      	b.n	80036b8 <__ssputs_r+0x58>
 8003700:	462a      	mov	r2, r5
 8003702:	f000 fb97 	bl	8003e34 <_realloc_r>
 8003706:	4606      	mov	r6, r0
 8003708:	2800      	cmp	r0, #0
 800370a:	d1e1      	bne.n	80036d0 <__ssputs_r+0x70>
 800370c:	6921      	ldr	r1, [r4, #16]
 800370e:	4650      	mov	r0, sl
 8003710:	f000 fab0 	bl	8003c74 <_free_r>
 8003714:	e7c7      	b.n	80036a6 <__ssputs_r+0x46>
	...

08003718 <_svfiprintf_r>:
 8003718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800371c:	4698      	mov	r8, r3
 800371e:	898b      	ldrh	r3, [r1, #12]
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	b09d      	sub	sp, #116	; 0x74
 8003724:	4607      	mov	r7, r0
 8003726:	460d      	mov	r5, r1
 8003728:	4614      	mov	r4, r2
 800372a:	d50e      	bpl.n	800374a <_svfiprintf_r+0x32>
 800372c:	690b      	ldr	r3, [r1, #16]
 800372e:	b963      	cbnz	r3, 800374a <_svfiprintf_r+0x32>
 8003730:	2140      	movs	r1, #64	; 0x40
 8003732:	f000 fb0b 	bl	8003d4c <_malloc_r>
 8003736:	6028      	str	r0, [r5, #0]
 8003738:	6128      	str	r0, [r5, #16]
 800373a:	b920      	cbnz	r0, 8003746 <_svfiprintf_r+0x2e>
 800373c:	230c      	movs	r3, #12
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	e0d1      	b.n	80038ea <_svfiprintf_r+0x1d2>
 8003746:	2340      	movs	r3, #64	; 0x40
 8003748:	616b      	str	r3, [r5, #20]
 800374a:	2300      	movs	r3, #0
 800374c:	9309      	str	r3, [sp, #36]	; 0x24
 800374e:	2320      	movs	r3, #32
 8003750:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003754:	f8cd 800c 	str.w	r8, [sp, #12]
 8003758:	2330      	movs	r3, #48	; 0x30
 800375a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003904 <_svfiprintf_r+0x1ec>
 800375e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003762:	f04f 0901 	mov.w	r9, #1
 8003766:	4623      	mov	r3, r4
 8003768:	469a      	mov	sl, r3
 800376a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800376e:	b10a      	cbz	r2, 8003774 <_svfiprintf_r+0x5c>
 8003770:	2a25      	cmp	r2, #37	; 0x25
 8003772:	d1f9      	bne.n	8003768 <_svfiprintf_r+0x50>
 8003774:	ebba 0b04 	subs.w	fp, sl, r4
 8003778:	d00b      	beq.n	8003792 <_svfiprintf_r+0x7a>
 800377a:	465b      	mov	r3, fp
 800377c:	4622      	mov	r2, r4
 800377e:	4629      	mov	r1, r5
 8003780:	4638      	mov	r0, r7
 8003782:	f7ff ff6d 	bl	8003660 <__ssputs_r>
 8003786:	3001      	adds	r0, #1
 8003788:	f000 80aa 	beq.w	80038e0 <_svfiprintf_r+0x1c8>
 800378c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800378e:	445a      	add	r2, fp
 8003790:	9209      	str	r2, [sp, #36]	; 0x24
 8003792:	f89a 3000 	ldrb.w	r3, [sl]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80a2 	beq.w	80038e0 <_svfiprintf_r+0x1c8>
 800379c:	2300      	movs	r3, #0
 800379e:	f04f 32ff 	mov.w	r2, #4294967295
 80037a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037a6:	f10a 0a01 	add.w	sl, sl, #1
 80037aa:	9304      	str	r3, [sp, #16]
 80037ac:	9307      	str	r3, [sp, #28]
 80037ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037b2:	931a      	str	r3, [sp, #104]	; 0x68
 80037b4:	4654      	mov	r4, sl
 80037b6:	2205      	movs	r2, #5
 80037b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037bc:	4851      	ldr	r0, [pc, #324]	; (8003904 <_svfiprintf_r+0x1ec>)
 80037be:	f7fc fd1f 	bl	8000200 <memchr>
 80037c2:	9a04      	ldr	r2, [sp, #16]
 80037c4:	b9d8      	cbnz	r0, 80037fe <_svfiprintf_r+0xe6>
 80037c6:	06d0      	lsls	r0, r2, #27
 80037c8:	bf44      	itt	mi
 80037ca:	2320      	movmi	r3, #32
 80037cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037d0:	0711      	lsls	r1, r2, #28
 80037d2:	bf44      	itt	mi
 80037d4:	232b      	movmi	r3, #43	; 0x2b
 80037d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037da:	f89a 3000 	ldrb.w	r3, [sl]
 80037de:	2b2a      	cmp	r3, #42	; 0x2a
 80037e0:	d015      	beq.n	800380e <_svfiprintf_r+0xf6>
 80037e2:	9a07      	ldr	r2, [sp, #28]
 80037e4:	4654      	mov	r4, sl
 80037e6:	2000      	movs	r0, #0
 80037e8:	f04f 0c0a 	mov.w	ip, #10
 80037ec:	4621      	mov	r1, r4
 80037ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037f2:	3b30      	subs	r3, #48	; 0x30
 80037f4:	2b09      	cmp	r3, #9
 80037f6:	d94e      	bls.n	8003896 <_svfiprintf_r+0x17e>
 80037f8:	b1b0      	cbz	r0, 8003828 <_svfiprintf_r+0x110>
 80037fa:	9207      	str	r2, [sp, #28]
 80037fc:	e014      	b.n	8003828 <_svfiprintf_r+0x110>
 80037fe:	eba0 0308 	sub.w	r3, r0, r8
 8003802:	fa09 f303 	lsl.w	r3, r9, r3
 8003806:	4313      	orrs	r3, r2
 8003808:	9304      	str	r3, [sp, #16]
 800380a:	46a2      	mov	sl, r4
 800380c:	e7d2      	b.n	80037b4 <_svfiprintf_r+0x9c>
 800380e:	9b03      	ldr	r3, [sp, #12]
 8003810:	1d19      	adds	r1, r3, #4
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	9103      	str	r1, [sp, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	bfbb      	ittet	lt
 800381a:	425b      	neglt	r3, r3
 800381c:	f042 0202 	orrlt.w	r2, r2, #2
 8003820:	9307      	strge	r3, [sp, #28]
 8003822:	9307      	strlt	r3, [sp, #28]
 8003824:	bfb8      	it	lt
 8003826:	9204      	strlt	r2, [sp, #16]
 8003828:	7823      	ldrb	r3, [r4, #0]
 800382a:	2b2e      	cmp	r3, #46	; 0x2e
 800382c:	d10c      	bne.n	8003848 <_svfiprintf_r+0x130>
 800382e:	7863      	ldrb	r3, [r4, #1]
 8003830:	2b2a      	cmp	r3, #42	; 0x2a
 8003832:	d135      	bne.n	80038a0 <_svfiprintf_r+0x188>
 8003834:	9b03      	ldr	r3, [sp, #12]
 8003836:	1d1a      	adds	r2, r3, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	9203      	str	r2, [sp, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	bfb8      	it	lt
 8003840:	f04f 33ff 	movlt.w	r3, #4294967295
 8003844:	3402      	adds	r4, #2
 8003846:	9305      	str	r3, [sp, #20]
 8003848:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003914 <_svfiprintf_r+0x1fc>
 800384c:	7821      	ldrb	r1, [r4, #0]
 800384e:	2203      	movs	r2, #3
 8003850:	4650      	mov	r0, sl
 8003852:	f7fc fcd5 	bl	8000200 <memchr>
 8003856:	b140      	cbz	r0, 800386a <_svfiprintf_r+0x152>
 8003858:	2340      	movs	r3, #64	; 0x40
 800385a:	eba0 000a 	sub.w	r0, r0, sl
 800385e:	fa03 f000 	lsl.w	r0, r3, r0
 8003862:	9b04      	ldr	r3, [sp, #16]
 8003864:	4303      	orrs	r3, r0
 8003866:	3401      	adds	r4, #1
 8003868:	9304      	str	r3, [sp, #16]
 800386a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800386e:	4826      	ldr	r0, [pc, #152]	; (8003908 <_svfiprintf_r+0x1f0>)
 8003870:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003874:	2206      	movs	r2, #6
 8003876:	f7fc fcc3 	bl	8000200 <memchr>
 800387a:	2800      	cmp	r0, #0
 800387c:	d038      	beq.n	80038f0 <_svfiprintf_r+0x1d8>
 800387e:	4b23      	ldr	r3, [pc, #140]	; (800390c <_svfiprintf_r+0x1f4>)
 8003880:	bb1b      	cbnz	r3, 80038ca <_svfiprintf_r+0x1b2>
 8003882:	9b03      	ldr	r3, [sp, #12]
 8003884:	3307      	adds	r3, #7
 8003886:	f023 0307 	bic.w	r3, r3, #7
 800388a:	3308      	adds	r3, #8
 800388c:	9303      	str	r3, [sp, #12]
 800388e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003890:	4433      	add	r3, r6
 8003892:	9309      	str	r3, [sp, #36]	; 0x24
 8003894:	e767      	b.n	8003766 <_svfiprintf_r+0x4e>
 8003896:	fb0c 3202 	mla	r2, ip, r2, r3
 800389a:	460c      	mov	r4, r1
 800389c:	2001      	movs	r0, #1
 800389e:	e7a5      	b.n	80037ec <_svfiprintf_r+0xd4>
 80038a0:	2300      	movs	r3, #0
 80038a2:	3401      	adds	r4, #1
 80038a4:	9305      	str	r3, [sp, #20]
 80038a6:	4619      	mov	r1, r3
 80038a8:	f04f 0c0a 	mov.w	ip, #10
 80038ac:	4620      	mov	r0, r4
 80038ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038b2:	3a30      	subs	r2, #48	; 0x30
 80038b4:	2a09      	cmp	r2, #9
 80038b6:	d903      	bls.n	80038c0 <_svfiprintf_r+0x1a8>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0c5      	beq.n	8003848 <_svfiprintf_r+0x130>
 80038bc:	9105      	str	r1, [sp, #20]
 80038be:	e7c3      	b.n	8003848 <_svfiprintf_r+0x130>
 80038c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80038c4:	4604      	mov	r4, r0
 80038c6:	2301      	movs	r3, #1
 80038c8:	e7f0      	b.n	80038ac <_svfiprintf_r+0x194>
 80038ca:	ab03      	add	r3, sp, #12
 80038cc:	9300      	str	r3, [sp, #0]
 80038ce:	462a      	mov	r2, r5
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <_svfiprintf_r+0x1f8>)
 80038d2:	a904      	add	r1, sp, #16
 80038d4:	4638      	mov	r0, r7
 80038d6:	f3af 8000 	nop.w
 80038da:	1c42      	adds	r2, r0, #1
 80038dc:	4606      	mov	r6, r0
 80038de:	d1d6      	bne.n	800388e <_svfiprintf_r+0x176>
 80038e0:	89ab      	ldrh	r3, [r5, #12]
 80038e2:	065b      	lsls	r3, r3, #25
 80038e4:	f53f af2c 	bmi.w	8003740 <_svfiprintf_r+0x28>
 80038e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038ea:	b01d      	add	sp, #116	; 0x74
 80038ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038f0:	ab03      	add	r3, sp, #12
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	462a      	mov	r2, r5
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <_svfiprintf_r+0x1f8>)
 80038f8:	a904      	add	r1, sp, #16
 80038fa:	4638      	mov	r0, r7
 80038fc:	f000 f87a 	bl	80039f4 <_printf_i>
 8003900:	e7eb      	b.n	80038da <_svfiprintf_r+0x1c2>
 8003902:	bf00      	nop
 8003904:	08004125 	.word	0x08004125
 8003908:	0800412f 	.word	0x0800412f
 800390c:	00000000 	.word	0x00000000
 8003910:	08003661 	.word	0x08003661
 8003914:	0800412b 	.word	0x0800412b

08003918 <_printf_common>:
 8003918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800391c:	4616      	mov	r6, r2
 800391e:	4699      	mov	r9, r3
 8003920:	688a      	ldr	r2, [r1, #8]
 8003922:	690b      	ldr	r3, [r1, #16]
 8003924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003928:	4293      	cmp	r3, r2
 800392a:	bfb8      	it	lt
 800392c:	4613      	movlt	r3, r2
 800392e:	6033      	str	r3, [r6, #0]
 8003930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003934:	4607      	mov	r7, r0
 8003936:	460c      	mov	r4, r1
 8003938:	b10a      	cbz	r2, 800393e <_printf_common+0x26>
 800393a:	3301      	adds	r3, #1
 800393c:	6033      	str	r3, [r6, #0]
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	0699      	lsls	r1, r3, #26
 8003942:	bf42      	ittt	mi
 8003944:	6833      	ldrmi	r3, [r6, #0]
 8003946:	3302      	addmi	r3, #2
 8003948:	6033      	strmi	r3, [r6, #0]
 800394a:	6825      	ldr	r5, [r4, #0]
 800394c:	f015 0506 	ands.w	r5, r5, #6
 8003950:	d106      	bne.n	8003960 <_printf_common+0x48>
 8003952:	f104 0a19 	add.w	sl, r4, #25
 8003956:	68e3      	ldr	r3, [r4, #12]
 8003958:	6832      	ldr	r2, [r6, #0]
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	42ab      	cmp	r3, r5
 800395e:	dc26      	bgt.n	80039ae <_printf_common+0x96>
 8003960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003964:	1e13      	subs	r3, r2, #0
 8003966:	6822      	ldr	r2, [r4, #0]
 8003968:	bf18      	it	ne
 800396a:	2301      	movne	r3, #1
 800396c:	0692      	lsls	r2, r2, #26
 800396e:	d42b      	bmi.n	80039c8 <_printf_common+0xb0>
 8003970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003974:	4649      	mov	r1, r9
 8003976:	4638      	mov	r0, r7
 8003978:	47c0      	blx	r8
 800397a:	3001      	adds	r0, #1
 800397c:	d01e      	beq.n	80039bc <_printf_common+0xa4>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	68e5      	ldr	r5, [r4, #12]
 8003982:	6832      	ldr	r2, [r6, #0]
 8003984:	f003 0306 	and.w	r3, r3, #6
 8003988:	2b04      	cmp	r3, #4
 800398a:	bf08      	it	eq
 800398c:	1aad      	subeq	r5, r5, r2
 800398e:	68a3      	ldr	r3, [r4, #8]
 8003990:	6922      	ldr	r2, [r4, #16]
 8003992:	bf0c      	ite	eq
 8003994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003998:	2500      	movne	r5, #0
 800399a:	4293      	cmp	r3, r2
 800399c:	bfc4      	itt	gt
 800399e:	1a9b      	subgt	r3, r3, r2
 80039a0:	18ed      	addgt	r5, r5, r3
 80039a2:	2600      	movs	r6, #0
 80039a4:	341a      	adds	r4, #26
 80039a6:	42b5      	cmp	r5, r6
 80039a8:	d11a      	bne.n	80039e0 <_printf_common+0xc8>
 80039aa:	2000      	movs	r0, #0
 80039ac:	e008      	b.n	80039c0 <_printf_common+0xa8>
 80039ae:	2301      	movs	r3, #1
 80039b0:	4652      	mov	r2, sl
 80039b2:	4649      	mov	r1, r9
 80039b4:	4638      	mov	r0, r7
 80039b6:	47c0      	blx	r8
 80039b8:	3001      	adds	r0, #1
 80039ba:	d103      	bne.n	80039c4 <_printf_common+0xac>
 80039bc:	f04f 30ff 	mov.w	r0, #4294967295
 80039c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039c4:	3501      	adds	r5, #1
 80039c6:	e7c6      	b.n	8003956 <_printf_common+0x3e>
 80039c8:	18e1      	adds	r1, r4, r3
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	2030      	movs	r0, #48	; 0x30
 80039ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80039d2:	4422      	add	r2, r4
 80039d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039dc:	3302      	adds	r3, #2
 80039de:	e7c7      	b.n	8003970 <_printf_common+0x58>
 80039e0:	2301      	movs	r3, #1
 80039e2:	4622      	mov	r2, r4
 80039e4:	4649      	mov	r1, r9
 80039e6:	4638      	mov	r0, r7
 80039e8:	47c0      	blx	r8
 80039ea:	3001      	adds	r0, #1
 80039ec:	d0e6      	beq.n	80039bc <_printf_common+0xa4>
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7d9      	b.n	80039a6 <_printf_common+0x8e>
	...

080039f4 <_printf_i>:
 80039f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039f8:	7e0f      	ldrb	r7, [r1, #24]
 80039fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039fc:	2f78      	cmp	r7, #120	; 0x78
 80039fe:	4691      	mov	r9, r2
 8003a00:	4680      	mov	r8, r0
 8003a02:	460c      	mov	r4, r1
 8003a04:	469a      	mov	sl, r3
 8003a06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a0a:	d807      	bhi.n	8003a1c <_printf_i+0x28>
 8003a0c:	2f62      	cmp	r7, #98	; 0x62
 8003a0e:	d80a      	bhi.n	8003a26 <_printf_i+0x32>
 8003a10:	2f00      	cmp	r7, #0
 8003a12:	f000 80d8 	beq.w	8003bc6 <_printf_i+0x1d2>
 8003a16:	2f58      	cmp	r7, #88	; 0x58
 8003a18:	f000 80a3 	beq.w	8003b62 <_printf_i+0x16e>
 8003a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a24:	e03a      	b.n	8003a9c <_printf_i+0xa8>
 8003a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a2a:	2b15      	cmp	r3, #21
 8003a2c:	d8f6      	bhi.n	8003a1c <_printf_i+0x28>
 8003a2e:	a101      	add	r1, pc, #4	; (adr r1, 8003a34 <_printf_i+0x40>)
 8003a30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a34:	08003a8d 	.word	0x08003a8d
 8003a38:	08003aa1 	.word	0x08003aa1
 8003a3c:	08003a1d 	.word	0x08003a1d
 8003a40:	08003a1d 	.word	0x08003a1d
 8003a44:	08003a1d 	.word	0x08003a1d
 8003a48:	08003a1d 	.word	0x08003a1d
 8003a4c:	08003aa1 	.word	0x08003aa1
 8003a50:	08003a1d 	.word	0x08003a1d
 8003a54:	08003a1d 	.word	0x08003a1d
 8003a58:	08003a1d 	.word	0x08003a1d
 8003a5c:	08003a1d 	.word	0x08003a1d
 8003a60:	08003bad 	.word	0x08003bad
 8003a64:	08003ad1 	.word	0x08003ad1
 8003a68:	08003b8f 	.word	0x08003b8f
 8003a6c:	08003a1d 	.word	0x08003a1d
 8003a70:	08003a1d 	.word	0x08003a1d
 8003a74:	08003bcf 	.word	0x08003bcf
 8003a78:	08003a1d 	.word	0x08003a1d
 8003a7c:	08003ad1 	.word	0x08003ad1
 8003a80:	08003a1d 	.word	0x08003a1d
 8003a84:	08003a1d 	.word	0x08003a1d
 8003a88:	08003b97 	.word	0x08003b97
 8003a8c:	682b      	ldr	r3, [r5, #0]
 8003a8e:	1d1a      	adds	r2, r3, #4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	602a      	str	r2, [r5, #0]
 8003a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0a3      	b.n	8003be8 <_printf_i+0x1f4>
 8003aa0:	6820      	ldr	r0, [r4, #0]
 8003aa2:	6829      	ldr	r1, [r5, #0]
 8003aa4:	0606      	lsls	r6, r0, #24
 8003aa6:	f101 0304 	add.w	r3, r1, #4
 8003aaa:	d50a      	bpl.n	8003ac2 <_printf_i+0xce>
 8003aac:	680e      	ldr	r6, [r1, #0]
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	2e00      	cmp	r6, #0
 8003ab2:	da03      	bge.n	8003abc <_printf_i+0xc8>
 8003ab4:	232d      	movs	r3, #45	; 0x2d
 8003ab6:	4276      	negs	r6, r6
 8003ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003abc:	485e      	ldr	r0, [pc, #376]	; (8003c38 <_printf_i+0x244>)
 8003abe:	230a      	movs	r3, #10
 8003ac0:	e019      	b.n	8003af6 <_printf_i+0x102>
 8003ac2:	680e      	ldr	r6, [r1, #0]
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aca:	bf18      	it	ne
 8003acc:	b236      	sxthne	r6, r6
 8003ace:	e7ef      	b.n	8003ab0 <_printf_i+0xbc>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	6820      	ldr	r0, [r4, #0]
 8003ad4:	1d19      	adds	r1, r3, #4
 8003ad6:	6029      	str	r1, [r5, #0]
 8003ad8:	0601      	lsls	r1, r0, #24
 8003ada:	d501      	bpl.n	8003ae0 <_printf_i+0xec>
 8003adc:	681e      	ldr	r6, [r3, #0]
 8003ade:	e002      	b.n	8003ae6 <_printf_i+0xf2>
 8003ae0:	0646      	lsls	r6, r0, #25
 8003ae2:	d5fb      	bpl.n	8003adc <_printf_i+0xe8>
 8003ae4:	881e      	ldrh	r6, [r3, #0]
 8003ae6:	4854      	ldr	r0, [pc, #336]	; (8003c38 <_printf_i+0x244>)
 8003ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8003aea:	bf0c      	ite	eq
 8003aec:	2308      	moveq	r3, #8
 8003aee:	230a      	movne	r3, #10
 8003af0:	2100      	movs	r1, #0
 8003af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003af6:	6865      	ldr	r5, [r4, #4]
 8003af8:	60a5      	str	r5, [r4, #8]
 8003afa:	2d00      	cmp	r5, #0
 8003afc:	bfa2      	ittt	ge
 8003afe:	6821      	ldrge	r1, [r4, #0]
 8003b00:	f021 0104 	bicge.w	r1, r1, #4
 8003b04:	6021      	strge	r1, [r4, #0]
 8003b06:	b90e      	cbnz	r6, 8003b0c <_printf_i+0x118>
 8003b08:	2d00      	cmp	r5, #0
 8003b0a:	d04d      	beq.n	8003ba8 <_printf_i+0x1b4>
 8003b0c:	4615      	mov	r5, r2
 8003b0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b12:	fb03 6711 	mls	r7, r3, r1, r6
 8003b16:	5dc7      	ldrb	r7, [r0, r7]
 8003b18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b1c:	4637      	mov	r7, r6
 8003b1e:	42bb      	cmp	r3, r7
 8003b20:	460e      	mov	r6, r1
 8003b22:	d9f4      	bls.n	8003b0e <_printf_i+0x11a>
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d10b      	bne.n	8003b40 <_printf_i+0x14c>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	07de      	lsls	r6, r3, #31
 8003b2c:	d508      	bpl.n	8003b40 <_printf_i+0x14c>
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	6861      	ldr	r1, [r4, #4]
 8003b32:	4299      	cmp	r1, r3
 8003b34:	bfde      	ittt	le
 8003b36:	2330      	movle	r3, #48	; 0x30
 8003b38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b40:	1b52      	subs	r2, r2, r5
 8003b42:	6122      	str	r2, [r4, #16]
 8003b44:	f8cd a000 	str.w	sl, [sp]
 8003b48:	464b      	mov	r3, r9
 8003b4a:	aa03      	add	r2, sp, #12
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	4640      	mov	r0, r8
 8003b50:	f7ff fee2 	bl	8003918 <_printf_common>
 8003b54:	3001      	adds	r0, #1
 8003b56:	d14c      	bne.n	8003bf2 <_printf_i+0x1fe>
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295
 8003b5c:	b004      	add	sp, #16
 8003b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b62:	4835      	ldr	r0, [pc, #212]	; (8003c38 <_printf_i+0x244>)
 8003b64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003b68:	6829      	ldr	r1, [r5, #0]
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b70:	6029      	str	r1, [r5, #0]
 8003b72:	061d      	lsls	r5, r3, #24
 8003b74:	d514      	bpl.n	8003ba0 <_printf_i+0x1ac>
 8003b76:	07df      	lsls	r7, r3, #31
 8003b78:	bf44      	itt	mi
 8003b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8003b7e:	6023      	strmi	r3, [r4, #0]
 8003b80:	b91e      	cbnz	r6, 8003b8a <_printf_i+0x196>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	f023 0320 	bic.w	r3, r3, #32
 8003b88:	6023      	str	r3, [r4, #0]
 8003b8a:	2310      	movs	r3, #16
 8003b8c:	e7b0      	b.n	8003af0 <_printf_i+0xfc>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	f043 0320 	orr.w	r3, r3, #32
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	2378      	movs	r3, #120	; 0x78
 8003b98:	4828      	ldr	r0, [pc, #160]	; (8003c3c <_printf_i+0x248>)
 8003b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003b9e:	e7e3      	b.n	8003b68 <_printf_i+0x174>
 8003ba0:	0659      	lsls	r1, r3, #25
 8003ba2:	bf48      	it	mi
 8003ba4:	b2b6      	uxthmi	r6, r6
 8003ba6:	e7e6      	b.n	8003b76 <_printf_i+0x182>
 8003ba8:	4615      	mov	r5, r2
 8003baa:	e7bb      	b.n	8003b24 <_printf_i+0x130>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	6826      	ldr	r6, [r4, #0]
 8003bb0:	6961      	ldr	r1, [r4, #20]
 8003bb2:	1d18      	adds	r0, r3, #4
 8003bb4:	6028      	str	r0, [r5, #0]
 8003bb6:	0635      	lsls	r5, r6, #24
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	d501      	bpl.n	8003bc0 <_printf_i+0x1cc>
 8003bbc:	6019      	str	r1, [r3, #0]
 8003bbe:	e002      	b.n	8003bc6 <_printf_i+0x1d2>
 8003bc0:	0670      	lsls	r0, r6, #25
 8003bc2:	d5fb      	bpl.n	8003bbc <_printf_i+0x1c8>
 8003bc4:	8019      	strh	r1, [r3, #0]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	6123      	str	r3, [r4, #16]
 8003bca:	4615      	mov	r5, r2
 8003bcc:	e7ba      	b.n	8003b44 <_printf_i+0x150>
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	1d1a      	adds	r2, r3, #4
 8003bd2:	602a      	str	r2, [r5, #0]
 8003bd4:	681d      	ldr	r5, [r3, #0]
 8003bd6:	6862      	ldr	r2, [r4, #4]
 8003bd8:	2100      	movs	r1, #0
 8003bda:	4628      	mov	r0, r5
 8003bdc:	f7fc fb10 	bl	8000200 <memchr>
 8003be0:	b108      	cbz	r0, 8003be6 <_printf_i+0x1f2>
 8003be2:	1b40      	subs	r0, r0, r5
 8003be4:	6060      	str	r0, [r4, #4]
 8003be6:	6863      	ldr	r3, [r4, #4]
 8003be8:	6123      	str	r3, [r4, #16]
 8003bea:	2300      	movs	r3, #0
 8003bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bf0:	e7a8      	b.n	8003b44 <_printf_i+0x150>
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	462a      	mov	r2, r5
 8003bf6:	4649      	mov	r1, r9
 8003bf8:	4640      	mov	r0, r8
 8003bfa:	47d0      	blx	sl
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	d0ab      	beq.n	8003b58 <_printf_i+0x164>
 8003c00:	6823      	ldr	r3, [r4, #0]
 8003c02:	079b      	lsls	r3, r3, #30
 8003c04:	d413      	bmi.n	8003c2e <_printf_i+0x23a>
 8003c06:	68e0      	ldr	r0, [r4, #12]
 8003c08:	9b03      	ldr	r3, [sp, #12]
 8003c0a:	4298      	cmp	r0, r3
 8003c0c:	bfb8      	it	lt
 8003c0e:	4618      	movlt	r0, r3
 8003c10:	e7a4      	b.n	8003b5c <_printf_i+0x168>
 8003c12:	2301      	movs	r3, #1
 8003c14:	4632      	mov	r2, r6
 8003c16:	4649      	mov	r1, r9
 8003c18:	4640      	mov	r0, r8
 8003c1a:	47d0      	blx	sl
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d09b      	beq.n	8003b58 <_printf_i+0x164>
 8003c20:	3501      	adds	r5, #1
 8003c22:	68e3      	ldr	r3, [r4, #12]
 8003c24:	9903      	ldr	r1, [sp, #12]
 8003c26:	1a5b      	subs	r3, r3, r1
 8003c28:	42ab      	cmp	r3, r5
 8003c2a:	dcf2      	bgt.n	8003c12 <_printf_i+0x21e>
 8003c2c:	e7eb      	b.n	8003c06 <_printf_i+0x212>
 8003c2e:	2500      	movs	r5, #0
 8003c30:	f104 0619 	add.w	r6, r4, #25
 8003c34:	e7f5      	b.n	8003c22 <_printf_i+0x22e>
 8003c36:	bf00      	nop
 8003c38:	08004136 	.word	0x08004136
 8003c3c:	08004147 	.word	0x08004147

08003c40 <memmove>:
 8003c40:	4288      	cmp	r0, r1
 8003c42:	b510      	push	{r4, lr}
 8003c44:	eb01 0402 	add.w	r4, r1, r2
 8003c48:	d902      	bls.n	8003c50 <memmove+0x10>
 8003c4a:	4284      	cmp	r4, r0
 8003c4c:	4623      	mov	r3, r4
 8003c4e:	d807      	bhi.n	8003c60 <memmove+0x20>
 8003c50:	1e43      	subs	r3, r0, #1
 8003c52:	42a1      	cmp	r1, r4
 8003c54:	d008      	beq.n	8003c68 <memmove+0x28>
 8003c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c5e:	e7f8      	b.n	8003c52 <memmove+0x12>
 8003c60:	4402      	add	r2, r0
 8003c62:	4601      	mov	r1, r0
 8003c64:	428a      	cmp	r2, r1
 8003c66:	d100      	bne.n	8003c6a <memmove+0x2a>
 8003c68:	bd10      	pop	{r4, pc}
 8003c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c72:	e7f7      	b.n	8003c64 <memmove+0x24>

08003c74 <_free_r>:
 8003c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c76:	2900      	cmp	r1, #0
 8003c78:	d044      	beq.n	8003d04 <_free_r+0x90>
 8003c7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c7e:	9001      	str	r0, [sp, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f1a1 0404 	sub.w	r4, r1, #4
 8003c86:	bfb8      	it	lt
 8003c88:	18e4      	addlt	r4, r4, r3
 8003c8a:	f000 f913 	bl	8003eb4 <__malloc_lock>
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	; (8003d08 <_free_r+0x94>)
 8003c90:	9801      	ldr	r0, [sp, #4]
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	b933      	cbnz	r3, 8003ca4 <_free_r+0x30>
 8003c96:	6063      	str	r3, [r4, #4]
 8003c98:	6014      	str	r4, [r2, #0]
 8003c9a:	b003      	add	sp, #12
 8003c9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ca0:	f000 b90e 	b.w	8003ec0 <__malloc_unlock>
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	d908      	bls.n	8003cba <_free_r+0x46>
 8003ca8:	6825      	ldr	r5, [r4, #0]
 8003caa:	1961      	adds	r1, r4, r5
 8003cac:	428b      	cmp	r3, r1
 8003cae:	bf01      	itttt	eq
 8003cb0:	6819      	ldreq	r1, [r3, #0]
 8003cb2:	685b      	ldreq	r3, [r3, #4]
 8003cb4:	1949      	addeq	r1, r1, r5
 8003cb6:	6021      	streq	r1, [r4, #0]
 8003cb8:	e7ed      	b.n	8003c96 <_free_r+0x22>
 8003cba:	461a      	mov	r2, r3
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	b10b      	cbz	r3, 8003cc4 <_free_r+0x50>
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d9fa      	bls.n	8003cba <_free_r+0x46>
 8003cc4:	6811      	ldr	r1, [r2, #0]
 8003cc6:	1855      	adds	r5, r2, r1
 8003cc8:	42a5      	cmp	r5, r4
 8003cca:	d10b      	bne.n	8003ce4 <_free_r+0x70>
 8003ccc:	6824      	ldr	r4, [r4, #0]
 8003cce:	4421      	add	r1, r4
 8003cd0:	1854      	adds	r4, r2, r1
 8003cd2:	42a3      	cmp	r3, r4
 8003cd4:	6011      	str	r1, [r2, #0]
 8003cd6:	d1e0      	bne.n	8003c9a <_free_r+0x26>
 8003cd8:	681c      	ldr	r4, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	6053      	str	r3, [r2, #4]
 8003cde:	4421      	add	r1, r4
 8003ce0:	6011      	str	r1, [r2, #0]
 8003ce2:	e7da      	b.n	8003c9a <_free_r+0x26>
 8003ce4:	d902      	bls.n	8003cec <_free_r+0x78>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	6003      	str	r3, [r0, #0]
 8003cea:	e7d6      	b.n	8003c9a <_free_r+0x26>
 8003cec:	6825      	ldr	r5, [r4, #0]
 8003cee:	1961      	adds	r1, r4, r5
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	bf04      	itt	eq
 8003cf4:	6819      	ldreq	r1, [r3, #0]
 8003cf6:	685b      	ldreq	r3, [r3, #4]
 8003cf8:	6063      	str	r3, [r4, #4]
 8003cfa:	bf04      	itt	eq
 8003cfc:	1949      	addeq	r1, r1, r5
 8003cfe:	6021      	streq	r1, [r4, #0]
 8003d00:	6054      	str	r4, [r2, #4]
 8003d02:	e7ca      	b.n	8003c9a <_free_r+0x26>
 8003d04:	b003      	add	sp, #12
 8003d06:	bd30      	pop	{r4, r5, pc}
 8003d08:	20000370 	.word	0x20000370

08003d0c <sbrk_aligned>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4e0e      	ldr	r6, [pc, #56]	; (8003d48 <sbrk_aligned+0x3c>)
 8003d10:	460c      	mov	r4, r1
 8003d12:	6831      	ldr	r1, [r6, #0]
 8003d14:	4605      	mov	r5, r0
 8003d16:	b911      	cbnz	r1, 8003d1e <sbrk_aligned+0x12>
 8003d18:	f000 f8bc 	bl	8003e94 <_sbrk_r>
 8003d1c:	6030      	str	r0, [r6, #0]
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4628      	mov	r0, r5
 8003d22:	f000 f8b7 	bl	8003e94 <_sbrk_r>
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d00a      	beq.n	8003d40 <sbrk_aligned+0x34>
 8003d2a:	1cc4      	adds	r4, r0, #3
 8003d2c:	f024 0403 	bic.w	r4, r4, #3
 8003d30:	42a0      	cmp	r0, r4
 8003d32:	d007      	beq.n	8003d44 <sbrk_aligned+0x38>
 8003d34:	1a21      	subs	r1, r4, r0
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f8ac 	bl	8003e94 <_sbrk_r>
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d101      	bne.n	8003d44 <sbrk_aligned+0x38>
 8003d40:	f04f 34ff 	mov.w	r4, #4294967295
 8003d44:	4620      	mov	r0, r4
 8003d46:	bd70      	pop	{r4, r5, r6, pc}
 8003d48:	20000374 	.word	0x20000374

08003d4c <_malloc_r>:
 8003d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d50:	1ccd      	adds	r5, r1, #3
 8003d52:	f025 0503 	bic.w	r5, r5, #3
 8003d56:	3508      	adds	r5, #8
 8003d58:	2d0c      	cmp	r5, #12
 8003d5a:	bf38      	it	cc
 8003d5c:	250c      	movcc	r5, #12
 8003d5e:	2d00      	cmp	r5, #0
 8003d60:	4607      	mov	r7, r0
 8003d62:	db01      	blt.n	8003d68 <_malloc_r+0x1c>
 8003d64:	42a9      	cmp	r1, r5
 8003d66:	d905      	bls.n	8003d74 <_malloc_r+0x28>
 8003d68:	230c      	movs	r3, #12
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	2600      	movs	r6, #0
 8003d6e:	4630      	mov	r0, r6
 8003d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d74:	4e2e      	ldr	r6, [pc, #184]	; (8003e30 <_malloc_r+0xe4>)
 8003d76:	f000 f89d 	bl	8003eb4 <__malloc_lock>
 8003d7a:	6833      	ldr	r3, [r6, #0]
 8003d7c:	461c      	mov	r4, r3
 8003d7e:	bb34      	cbnz	r4, 8003dce <_malloc_r+0x82>
 8003d80:	4629      	mov	r1, r5
 8003d82:	4638      	mov	r0, r7
 8003d84:	f7ff ffc2 	bl	8003d0c <sbrk_aligned>
 8003d88:	1c43      	adds	r3, r0, #1
 8003d8a:	4604      	mov	r4, r0
 8003d8c:	d14d      	bne.n	8003e2a <_malloc_r+0xde>
 8003d8e:	6834      	ldr	r4, [r6, #0]
 8003d90:	4626      	mov	r6, r4
 8003d92:	2e00      	cmp	r6, #0
 8003d94:	d140      	bne.n	8003e18 <_malloc_r+0xcc>
 8003d96:	6823      	ldr	r3, [r4, #0]
 8003d98:	4631      	mov	r1, r6
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	eb04 0803 	add.w	r8, r4, r3
 8003da0:	f000 f878 	bl	8003e94 <_sbrk_r>
 8003da4:	4580      	cmp	r8, r0
 8003da6:	d13a      	bne.n	8003e1e <_malloc_r+0xd2>
 8003da8:	6821      	ldr	r1, [r4, #0]
 8003daa:	3503      	adds	r5, #3
 8003dac:	1a6d      	subs	r5, r5, r1
 8003dae:	f025 0503 	bic.w	r5, r5, #3
 8003db2:	3508      	adds	r5, #8
 8003db4:	2d0c      	cmp	r5, #12
 8003db6:	bf38      	it	cc
 8003db8:	250c      	movcc	r5, #12
 8003dba:	4629      	mov	r1, r5
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	f7ff ffa5 	bl	8003d0c <sbrk_aligned>
 8003dc2:	3001      	adds	r0, #1
 8003dc4:	d02b      	beq.n	8003e1e <_malloc_r+0xd2>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	442b      	add	r3, r5
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	e00e      	b.n	8003dec <_malloc_r+0xa0>
 8003dce:	6822      	ldr	r2, [r4, #0]
 8003dd0:	1b52      	subs	r2, r2, r5
 8003dd2:	d41e      	bmi.n	8003e12 <_malloc_r+0xc6>
 8003dd4:	2a0b      	cmp	r2, #11
 8003dd6:	d916      	bls.n	8003e06 <_malloc_r+0xba>
 8003dd8:	1961      	adds	r1, r4, r5
 8003dda:	42a3      	cmp	r3, r4
 8003ddc:	6025      	str	r5, [r4, #0]
 8003dde:	bf18      	it	ne
 8003de0:	6059      	strne	r1, [r3, #4]
 8003de2:	6863      	ldr	r3, [r4, #4]
 8003de4:	bf08      	it	eq
 8003de6:	6031      	streq	r1, [r6, #0]
 8003de8:	5162      	str	r2, [r4, r5]
 8003dea:	604b      	str	r3, [r1, #4]
 8003dec:	4638      	mov	r0, r7
 8003dee:	f104 060b 	add.w	r6, r4, #11
 8003df2:	f000 f865 	bl	8003ec0 <__malloc_unlock>
 8003df6:	f026 0607 	bic.w	r6, r6, #7
 8003dfa:	1d23      	adds	r3, r4, #4
 8003dfc:	1af2      	subs	r2, r6, r3
 8003dfe:	d0b6      	beq.n	8003d6e <_malloc_r+0x22>
 8003e00:	1b9b      	subs	r3, r3, r6
 8003e02:	50a3      	str	r3, [r4, r2]
 8003e04:	e7b3      	b.n	8003d6e <_malloc_r+0x22>
 8003e06:	6862      	ldr	r2, [r4, #4]
 8003e08:	42a3      	cmp	r3, r4
 8003e0a:	bf0c      	ite	eq
 8003e0c:	6032      	streq	r2, [r6, #0]
 8003e0e:	605a      	strne	r2, [r3, #4]
 8003e10:	e7ec      	b.n	8003dec <_malloc_r+0xa0>
 8003e12:	4623      	mov	r3, r4
 8003e14:	6864      	ldr	r4, [r4, #4]
 8003e16:	e7b2      	b.n	8003d7e <_malloc_r+0x32>
 8003e18:	4634      	mov	r4, r6
 8003e1a:	6876      	ldr	r6, [r6, #4]
 8003e1c:	e7b9      	b.n	8003d92 <_malloc_r+0x46>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4638      	mov	r0, r7
 8003e24:	f000 f84c 	bl	8003ec0 <__malloc_unlock>
 8003e28:	e7a1      	b.n	8003d6e <_malloc_r+0x22>
 8003e2a:	6025      	str	r5, [r4, #0]
 8003e2c:	e7de      	b.n	8003dec <_malloc_r+0xa0>
 8003e2e:	bf00      	nop
 8003e30:	20000370 	.word	0x20000370

08003e34 <_realloc_r>:
 8003e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e38:	4680      	mov	r8, r0
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	460e      	mov	r6, r1
 8003e3e:	b921      	cbnz	r1, 8003e4a <_realloc_r+0x16>
 8003e40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e44:	4611      	mov	r1, r2
 8003e46:	f7ff bf81 	b.w	8003d4c <_malloc_r>
 8003e4a:	b92a      	cbnz	r2, 8003e58 <_realloc_r+0x24>
 8003e4c:	f7ff ff12 	bl	8003c74 <_free_r>
 8003e50:	4625      	mov	r5, r4
 8003e52:	4628      	mov	r0, r5
 8003e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e58:	f000 f838 	bl	8003ecc <_malloc_usable_size_r>
 8003e5c:	4284      	cmp	r4, r0
 8003e5e:	4607      	mov	r7, r0
 8003e60:	d802      	bhi.n	8003e68 <_realloc_r+0x34>
 8003e62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e66:	d812      	bhi.n	8003e8e <_realloc_r+0x5a>
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f7ff ff6e 	bl	8003d4c <_malloc_r>
 8003e70:	4605      	mov	r5, r0
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0ed      	beq.n	8003e52 <_realloc_r+0x1e>
 8003e76:	42bc      	cmp	r4, r7
 8003e78:	4622      	mov	r2, r4
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	bf28      	it	cs
 8003e7e:	463a      	movcs	r2, r7
 8003e80:	f7ff fb04 	bl	800348c <memcpy>
 8003e84:	4631      	mov	r1, r6
 8003e86:	4640      	mov	r0, r8
 8003e88:	f7ff fef4 	bl	8003c74 <_free_r>
 8003e8c:	e7e1      	b.n	8003e52 <_realloc_r+0x1e>
 8003e8e:	4635      	mov	r5, r6
 8003e90:	e7df      	b.n	8003e52 <_realloc_r+0x1e>
	...

08003e94 <_sbrk_r>:
 8003e94:	b538      	push	{r3, r4, r5, lr}
 8003e96:	4d06      	ldr	r5, [pc, #24]	; (8003eb0 <_sbrk_r+0x1c>)
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4604      	mov	r4, r0
 8003e9c:	4608      	mov	r0, r1
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	f7fd f82a 	bl	8000ef8 <_sbrk>
 8003ea4:	1c43      	adds	r3, r0, #1
 8003ea6:	d102      	bne.n	8003eae <_sbrk_r+0x1a>
 8003ea8:	682b      	ldr	r3, [r5, #0]
 8003eaa:	b103      	cbz	r3, 8003eae <_sbrk_r+0x1a>
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	bd38      	pop	{r3, r4, r5, pc}
 8003eb0:	20000378 	.word	0x20000378

08003eb4 <__malloc_lock>:
 8003eb4:	4801      	ldr	r0, [pc, #4]	; (8003ebc <__malloc_lock+0x8>)
 8003eb6:	f000 b811 	b.w	8003edc <__retarget_lock_acquire_recursive>
 8003eba:	bf00      	nop
 8003ebc:	2000037c 	.word	0x2000037c

08003ec0 <__malloc_unlock>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	; (8003ec8 <__malloc_unlock+0x8>)
 8003ec2:	f000 b80c 	b.w	8003ede <__retarget_lock_release_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	2000037c 	.word	0x2000037c

08003ecc <_malloc_usable_size_r>:
 8003ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed0:	1f18      	subs	r0, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfbc      	itt	lt
 8003ed6:	580b      	ldrlt	r3, [r1, r0]
 8003ed8:	18c0      	addlt	r0, r0, r3
 8003eda:	4770      	bx	lr

08003edc <__retarget_lock_acquire_recursive>:
 8003edc:	4770      	bx	lr

08003ede <__retarget_lock_release_recursive>:
 8003ede:	4770      	bx	lr

08003ee0 <_init>:
 8003ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ee2:	bf00      	nop
 8003ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee6:	bc08      	pop	{r3}
 8003ee8:	469e      	mov	lr, r3
 8003eea:	4770      	bx	lr

08003eec <_fini>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr
